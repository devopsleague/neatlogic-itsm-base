<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.process.dao.mapper.ChannelMapper">
<cache type="codedriver.framework.dao.cache.CodeDriverCache" flushInterval="300000" size="1024" readOnly="true"></cache>
	<select id="searchChannelCount" parameterType="codedriver.framework.process.dto.ChannelVo" resultType="int" useCache="false">
		SELECT
		count(c.`uuid`)
		FROM
		`channel` c
		<if test="isFavorite != 1">
			LEFT
		</if>
		JOIN `channel_user` cu ON cu.`channel_uuid` = c.`uuid` AND cu.`user_uuid` = #{userUuid}
		WHERE 1=1
		<if test="authorizedUuidList != null and authorizedUuidList.size() > 0">
			AND c.`uuid` IN 
			<foreach collection="authorizedUuidList" item="authorizedUuid" open="(" separator=","  close=")">
				#{authorizedUuid}
			</foreach>
		</if>
		<if test="parentUuid != null">
			AND c.`parent_uuid` = #{parentUuid}
		</if>
		<if test="keyword != null and keyword != ''">
			AND c.`name` LIKE CONCAT('%',#{keyword},'%')
		</if>
		<if test="isActive != null">
			AND c.`is_active` = #{isActive}
		</if>
	</select>
	
	<resultMap type="codedriver.framework.process.dto.ChannelVo" id="channelMap">
		<id column="uuid" property="uuid" />
		<result column="name" property="name" />
		<result column="parent_uuid" property="parentUuid" />
		<result column="is_active" property="isActive" />
		<result column="icon" property="icon" />
		<result column="color" property="color" />
		<result column="desc" property="desc" />
		<result column="channel_type_uuid" property="channelTypeUuid" />
		<result column="isFavorite" property="isFavorite" />
		<result column="sort" property="sort" />
	</resultMap>
	
	<select id="searchChannelList" parameterType="codedriver.framework.process.dto.ChannelVo" resultMap="channelMap" useCache="false">
		SELECT
		c.`uuid`,
		c.`name`,
		c.`parent_uuid`,
		c.`is_active`,
		c.`icon`,
		c.`color`,
		c.`desc`,
		c.`channel_type_uuid`,
		CASE WHEN cu.`user_uuid` IS NULL THEN 0 ELSE 1 END AS `isFavorite`,
		c.`sort`
		FROM
		`channel` c
		<if test="isFavorite != 1">
			LEFT
		</if>
		JOIN `channel_user` cu ON cu.`channel_uuid` = c.`uuid` AND cu.`user_uuid` = #{userUuid}
		WHERE 1=1
		<if test="authorizedUuidList != null and authorizedUuidList.size() > 0">
			AND c.`uuid` IN 
			<foreach collection="authorizedUuidList" item="authorizedUuid" open="(" separator=","  close=")">
				#{authorizedUuid}
			</foreach>
		</if>
		<if test="parentUuid != null">
			AND c.`parent_uuid` = #{parentUuid}
		</if>
		<if test="keyword != null and keyword != ''">
			AND c.`name` LIKE CONCAT('%',#{keyword},'%')
		</if>
		<if test="isActive != null">
			AND c.`is_active` = #{isActive}
		</if>
		<choose>
			<when test="isFavorite == 1">
				ORDER BY cu.`insert_time` DESC
			</when>
			<otherwise>
				ORDER BY c.`parent_uuid`, c.`sort`
			</otherwise>
		</choose>
		<if test="needPage">
			limit #{startNum}, #{pageSize}
		</if>
	</select>

	<select id="getChannelByUuid" parameterType="java.lang.String" resultType="codedriver.framework.process.dto.ChannelVo" useCache="true">
		SELECT
		c.`uuid`,
		c.`name`,
		c.`parent_uuid` AS parentUuid,
		c.`is_active` AS isActive,
		c.`icon`,
		c.`color`,
		c.`desc`,
		c.`sort`,
		c.`sla`,
		c.`allow_desc` AS allowDesc,
		c.`help`,
		c.`is_active_help` AS isActiveHelp,
		c.`channel_type_uuid` AS channelTypeUuid,
		cp.`process_uuid` AS processUuid,
		cw.`worktime_uuid` AS worktimeUuid
		FROM
		`channel` c
		JOIN `channel_process` cp ON cp.channel_uuid = c.uuid
		JOIN `channel_worktime` cw ON cw.channel_uuid = c.uuid
		WHERE `uuid` = #{uuid}
	</select>
	
	<select id="getChannelByUuidList" parameterType="java.util.List" resultType="codedriver.framework.process.dto.ChannelVo" useCache="true">
		SELECT
		c.`uuid`,
		c.`name`,
		c.`parent_uuid` AS parentUuid,
		c.`is_active` AS isActive,
		c.`icon`,
		c.`color`,
		c.`desc`,
		c.`sort`,
		c.`sla`,
		c.`allow_desc` AS allowDesc,
		c.`help`,
		c.`is_active_help` AS isActiveHelp,
		c.`channel_type_uuid` AS channelTypeUuid,
		cp.`process_uuid` AS processUuid,
		cw.`worktime_uuid` AS worktimeUuid
		FROM
		`channel` c
		JOIN `channel_process` cp ON cp.channel_uuid = c.uuid
		JOIN `channel_worktime` cw ON cw.channel_uuid = c.uuid
		WHERE `uuid` in
		<foreach collection="channelUuidList" item="channelUuid" open="(" separator=","  close=")">
				#{channelUuid}
		</foreach>
	</select>
	
	<select id="getMaxSortByParentUuid"  parameterType="java.lang.String" resultType="int" useCache="false">
		SELECT IFNULL(MAX(`sort`), 0) FROM `channel` WHERE `parent_uuid` = #{parentUuid}
	</select>

	<select id="getChannelPriorityListByChannelUuid" parameterType="java.lang.String" resultType="codedriver.framework.process.dto.ChannelPriorityVo" useCache="false">
		SELECT
		`channel_uuid` AS channelUuid,
		`priority_uuid` AS priorityUuid,
		`is_default` AS isDefault
		FROM `channel_priority`
		WHERE channel_uuid = #{channelUuid}
	</select>

	<select id="checkChannelIsExists" parameterType="java.lang.String" resultType="int" useCache="false">
		SELECT COUNT(`uuid`) FROM `channel` where `uuid`=#{uuid}
	</select>

	<select id="checkChannelNameIsRepeat"  parameterType="codedriver.framework.process.dto.ChannelVo" resultType="int" useCache="false">
		SELECT COUNT(1) FROM `channel` where  `parent_uuid`=#{parentUuid} AND `name`=#{name} AND `uuid`!=#{uuid}
	</select>

	<resultMap type="codedriver.framework.process.dto.ChannelVo" id="simpleChannelMap">
		<id column="uuid" property="uuid" />
		<result column="name" property="name" />
		<result column="parent_uuid" property="parentUuid" />
		<result column="sort" property="sort" />
	</resultMap>
	<select id="getChannelListForTree" parameterType="java.lang.Integer" resultMap="simpleChannelMap" useCache="false">
		SELECT
		c.`uuid`,
		c.`name`,
		c.`parent_uuid`,
		c.`sort`
		FROM
		`channel` c
		<if test="isActive != null">
			WHERE c.`is_active` = #{isActive}
		</if>
		ORDER BY c.`parent_uuid`, c.`sort`
	</select>
	
	<select id="getProcessUuidByChannelUuid" parameterType="java.lang.String" resultType="java.lang.String" useCache="false">
	SELECT `process_uuid` FROM `channel_process` WHERE `channel_uuid` = #{channelUuid}
	</select>
	
	<select id="getChannelAuthorityListByChannelUuid" parameterType="java.lang.String" resultType="codedriver.framework.dto.AuthorityVo" useCache="false">
	SELECT 
	  `channel_uuid` AS channelUuid,
	  `type`,
	  `uuid`
	FROM `channel_authority` 
	WHERE `channel_uuid` = #{channelUuid}
	</select>
	
	<select id="searchChannelTypeCount" parameterType="codedriver.framework.process.dto.ChannelTypeVo" resultType="int" useCache="false">
	SELECT 
	  count(1)
	FROM `channel_type`
	<where>
		<if test="keyword != null and keyword != ''">
			AND `name` LIKE CONCAT('%', #{keyword}, '%')
		</if>
		<if test="isActive != null">
			AND `is_active` = #{isActive}
		</if>
	</where>
	</select>

	<select id="searchChannelTypeList" parameterType="codedriver.framework.process.dto.ChannelTypeVo" resultType="codedriver.framework.process.dto.ChannelTypeVo" useCache="false">
	SELECT 
	  `uuid`,
	  `name`,
	  `is_active` AS isActive,
	  `icon`,
	  `color`,
	  `description`,
	  `sort`,
	  `prefix`
	FROM `channel_type`
	<where>
		<if test="keyword != null and keyword != ''">
			AND `name` LIKE CONCAT('%', #{keyword}, '%')
		</if>
		<if test="isActive != null">
			AND `is_active` = #{isActive}
		</if>
	</where>
	ORDER BY `sort` desc
	<if test="needPage">
		limit #{startNum}, #{pageSize}
	</if>
	</select>

	<select id="getChannelTypeByUuid" parameterType="java.lang.String" resultType="codedriver.framework.process.dto.ChannelTypeVo" useCache="true">
	SELECT 
	  `uuid`,
	  `name`,
	  `is_active` AS isActive,
	  `icon`,
	  `color`,
	  `description`,
	  `sort`,
	  `prefix`
	FROM `channel_type`
	WHERE `uuid` = #{uuid}
	</select>
	
	<select id="checkChannelTypeIsExists" parameterType="java.lang.String" resultType="int" useCache="false">
	SELECT COUNT(`uuid`) FROM `channel_type` WHERE `uuid` = #{uuid}
	</select>
	
	<select id="checkChannelTypeNameIsRepeat" parameterType="codedriver.framework.process.dto.ChannelTypeVo" resultType="int" useCache="false">
	SELECT COUNT(1) FROM `channel_type` WHERE `name` = #{name} AND `uuid` != #{uuid}
	</select>

	<select id="getChannelTypeMaxSort" resultType="int" useCache="false">
	SELECT MAX(`sort`) FROM `channel_type` FOR UPDATE
	</select>
	
	<select id="getAuthorizedChannelUuidList" resultType="java.lang.String">
	SELECT 
	  DISTINCT `channel_uuid`
	FROM `channel_authority` 
	<where>
		<if test="channelUuid != null and channelUuid != ''">
		`channel_uuid` = #{channelUuid} AND (
		</if>
		(type = 'common' AND `uuid` = 'alluser')
		<if test="userUuid != null and userUuid != ''">
		OR (type = 'user' AND `uuid` = #{userUuid})
		</if>
		<if test="teamUuidList != null and teamUuidList.size() > 0">
		OR (type = 'team' AND `uuid` IN 
			<foreach collection="teamUuidList" item="teamUuid" open="(" separator=","  close=")">
			#{teamUuid}
			</foreach>
			)
		</if>
		<if test="roleUuidList != null and roleUuidList.size() > 0">
		OR (type = 'role' AND `uuid` IN 
			<foreach collection="roleUuidList" item="roleUuid" open="(" separator=","  close=")">
				#{roleUuid}
			</foreach>
			)
		</if>
		<if test="channelUuid != null and channelUuid != ''">
		)
		</if>
		</where>
	</select>
	
	<insert id="replaceChannel" parameterType="codedriver.framework.process.dto.ChannelVo">
		REPLACE INTO `channel` (
		`uuid`,
		`name`,
		`parent_uuid`,
		`is_active`,
		`icon`,
		`color`,
		`desc`,
		`sort`,
		`sla`,
		`allow_desc`,
		`help`,
		`is_active_help`,
		`channel_type_uuid`
		)
		VALUES
		(
		#{uuid},
		#{name},
		#{parentUuid},
		#{isActive},
		#{icon},
		#{color},
		#{desc},
		#{sort},
		#{sla},
		#{allowDesc},
		#{help},
		#{isActiveHelp},
		#{channelTypeUuid}
		)
	</insert>

	<insert id="replaceChannelUser">
		REPLACE INTO `channel_user`(`user_uuid`, `channel_uuid`, `insert_time`) VALUES(#{userUuid}, #{channelUuid}, now())
	</insert>

	<insert id="insertChannelPriority">
		INSERT INTO `channel_priority`(`channel_uuid`, `priority_uuid`, `is_default`) VALUES(#{channelUuid}, #{priorityUuid}, #{isDefault})
	</insert>

	<insert id="replaceChannelProcess">
		REPLACE INTO `channel_process`(`channel_uuid`, `process_uuid`) VALUES(#{channelUuid}, #{processUuid})
	</insert>
	
	<insert id="insertChannelAuthority" >
	INSERT INTO `channel_authority` (
	  `channel_uuid`,
	  `type`,
	  `uuid`
	) 
	VALUES
	  (
	    #{channelUuid},
	    #{authorityVo.type},
	    #{authorityVo.uuid}
	  )
	</insert>
	
	<insert id="replaceChannelWorktime">
		REPLACE INTO `channel_worktime`(`channel_uuid`, `worktime_uuid`) VALUES(#{channelUuid}, #{worktimeUuid})
	</insert>
	
	<insert id="insertChannelType" parameterType="codedriver.framework.process.dto.ChannelTypeVo">
	INSERT INTO `channel_type` (
	  `uuid`,
	  `name`,
	  `is_active`,
	  `icon`,
	  `color`,
	  `description`,
	  `sort`,
	  `prefix`
	) 
	VALUES
	  (
	    #{uuid},
	    #{name},
	    #{isActive},
	    #{icon},
	    #{color},
	    #{description},
	    #{sort},
	    #{prefix}
	  )
	</insert>

	<update id="updateChannelForMove"  parameterType="codedriver.framework.process.dto.ChannelVo">
		UPDATE `channel` SET `parent_uuid` = #{parentUuid}, `sort` = #{sort} WHERE `uuid` = #{uuid}
	</update>

	<update id="updateSortIncrement">
		UPDATE `channel` SET `sort` = `sort` + 1
		WHERE `parent_uuid` = #{parentUuid}
		AND `sort` &gt;= #{fromSort}
		<if test="toSort != null">
			AND `sort` &lt;= #{toSort}
		</if>
	</update>

	<update id="updateSortDecrement">
		UPDATE `channel` SET `sort` = `sort` - 1
		WHERE `parent_uuid` = #{parentUuid}
		AND `sort` &gt;= #{fromSort}
		<if test="toSort != null">
			AND `sort` &lt;= #{toSort}
		</if>
	</update>
	
	<update id="updateChannelTypeByUuid" parameterType="codedriver.framework.process.dto.ChannelTypeVo">
	UPDATE `channel_type` 
	SET
	  `name` = #{name},
	  `is_active` = #{isActive},
	  `icon` = #{icon},
	  `color` = #{color},
	  `description` = #{description},
	  `sort` = #{sort},
	  `prefix` = #{prefix} 
	WHERE `uuid` = #{uuid}
	</update>

	<delete id="deleteChannelUser">
		DELETE FROM `channel_user` WHERE `user_uuid` = #{userUuid} AND `channel_uuid` = #{channelUuid}
	</delete>

	<delete id="deleteChannelByUuid" parameterType="java.lang.String">
		DELETE FROM `channel` WHERE `uuid` = #{uuid}
	</delete>

	<delete id="deleteChannelPriorityByChannelUuid" parameterType="java.lang.String">
		DELETE FROM `channel_priority` WHERE `channel_uuid` = #{channelUuid}
	</delete>

	<delete id="deleteChannelProcessByChannelUuid" parameterType="java.lang.String">
		DELETE FROM `channel_process` WHERE `channel_uuid` = #{channelUuid}
	</delete>

	<delete id="deleteChannelWorktimeByChannelUuid" parameterType="java.lang.String">
		DELETE FROM `channel_worktime` WHERE `channel_uuid` = #{channelUuid}
	</delete>

	<delete id="deleteChannelUserByChannelUuid" parameterType="java.lang.String">
		DELETE FROM `channel_user` WHERE `channel_uuid` = #{channelUuid}
	</delete>

	<delete id="deleteChannelAuthorityByChannelUuid" parameterType="java.lang.String">
		DELETE FROM `channel_authority` WHERE `channel_uuid` = #{channelUuid}
	</delete>
	
	<delete id="deleteChannelTypeByUuid" parameterType="java.lang.String">
		DELETE FROM `channel_type` WHERE `uuid` = #{uuid}
	</delete>
</mapper>