<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.process.dao.mapper.ProcessTaskMapper">

	<select id="getAllProcessTaskSlaTransfer" resultType="codedriver.framework.process.dto.ProcessTaskSlaTransferVo">
		SELECT
		`id`,
		`sla_id` AS slaId,
		`hash`,
		`trigger_time` as triggerTime,
		`config`
		FROM
		`processtask_sla_transfer`
	</select>

	<select id="getProcessTaskSlaTransferById" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskSlaTransferVo">
		SELECT
		`id`,
		`sla_id` AS slaId,
		`hash`,
		`trigger_time` as triggerTime,
		`config`
		FROM
		`processtask_sla_transfer`
		WHERE
		id = #{value}
	</select>

	<select id="getAllProcessTaskSlaNotify" resultType="codedriver.framework.process.dto.ProcessTaskSlaNotifyVo">
		SELECT
		id,
		`sla_id` AS slaId,
		`hash`,
		`trigger_time` as triggerTime,
		`config`
		FROM
		`processtask_sla_notify`
	</select>

	<select id="getProcessTaskSlaById" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskSlaVo">
		SELECT
		`processtask_id` AS processTaskId,
		`id`,
		`name`,
		`config`
		FROM
		`processtask_sla`
		WHERE
		id = #{value}
	</select>

	<select id="getProcessTaskSlaNotifyById" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskSlaNotifyVo">
		SELECT
		id,
		`sla_id` AS slaId,
		`hash`,
		`trigger_time` as triggerTime,
		`config`
		FROM
		`processtask_sla_notify`
		WHERE
		id =
		#{value}
	</select>

	<select id="getProcessTaskStepRelByProcessTaskId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepRelVo">
		SELECT
		`processtask_id` AS processTaskId,
		`from_process_step_uuid` AS fromProcessStepUuid,
		`to_process_step_uuid` AS toProcessStepUuid,
		`from_processtask_step_id` AS fromProcessTaskStepId,
		`to_processtask_step_id` AS toProcessTaskStepId,
		(SELECT xx.`handler` FROM `processtask_step` xx WHERE
		xx.id = `to_processtask_step_id`) AS toProcessStepHandler,
		`condition`,
		`uuid` as processStepRelUuid,
		`is_hit` AS isHit,
		`name`,
		`type`
		FROM
		`processtask_step_rel`
		WHERE processtask_id = #{value}
	</select>

	<resultMap id="processTaskSlaMap" type="codedriver.framework.process.dto.ProcessTaskSlaVo">
		<id column="id" property="id" />
		<result column="processTaskId" property="processTaskId" />
		<result column="name" property="name" />
		<result column="config" property="config" />
		<association property="slaTimeVo" javaType="codedriver.framework.process.dto.ProcessTaskSlaTimeVo">
			<result column="expireTime" property="expireTime" />
			<result column="realExpireTime" property="realExpireTime" />
			<result column="expireTimeLong" property="expireTimeLong" />
			<result column="realExpireTimeLong" property="realExpireTimeLong" />
			<result column="timeLeft" property="timeLeft" />
			<result column="realTimeLeft" property="realTimeLeft" />
			<result column="timeSum" property="timeSum" />
			<result column="processTaskStepId" property="processTaskStepId" />
		</association>
	</resultMap>

	<select id="getProcessTaskSlaByProcessTaskStepId" parameterType="java.lang.Long" resultMap="processTaskSlaMap">
		SELECT
		a.`processtask_id` as processTaskId,
		a.`id`,
		a.`name`,
		a.`config`,
		c.`expire_time` as expireTime,
		c.`realexpire_time` AS realExpireTime,
		c.`time_left` as timeLeft,
		c.`realtime_left` as realTimeLeft,
		c.`time_sum` as timeSum
		FROM `processtask_sla` a
		JOIN `processtask_step_sla` b ON a.`id` = b.`sla_id`
		LEFT JOIN `processtask_sla_time` c ON a.`id` = c.`sla_id`
		WHERE b.`processtask_step_id` = #{value}
		ORDER BY c.`expire_time` ASC
	</select>

	<select id="getProcessTaskSlaByProcessTaskId" parameterType="java.lang.Long" resultMap="processTaskSlaMap">
		SELECT
		a.`processtask_id` as processTaskId,
		a.`id`,
		a.`name`,
		a.`config`,
		b.`processtask_step_id` as
		processTaskStepId,
		UNIX_TIMESTAMP(c.`expire_time`) * 1000 as expireTimeLong,
		UNIX_TIMESTAMP(c.`realexpire_time`) * 1000 AS realExpireTimeLong,
		c.`time_left` as timeLeft,
		c.`realtime_left` as
		realTimeLeft,
		c.`time_sum` as timeSum
		FROM `processtask_sla` a
		JOIN `processtask_step_sla` b ON a.`id` = b.`sla_id`
		LEFT JOIN `processtask_sla_time` c ON a.`id` = c.`sla_id`
		WHERE a.`processtask_id` =
		#{value}
		ORDER BY c.`expire_time` ASC
	</select>

	<resultMap type="codedriver.framework.process.dto.ProcessTaskSlaTimeVo" id="processTaskSlaTimeMap">
		<id column="sla_id" property="slaId" />
		<result column="processTaskId" property="processTaskId" />
		<result column="processTaskStepId" property="processTaskStepId" />
		<result column="name" property="name" />
		<result column="expireTime" property="expireTime" />
		<result column="realExpireTime" property="realExpireTime" />
		<result column="timeLeft" property="timeLeft" />
		<result column="realTimeLeft" property="realTimeLeft" />
		<result column="timeSum" property="timeSum" />
	</resultMap>
	<select id="getProcessTaskSlaTimeByProcessTaskStepIdList" parameterType="java.util.List" resultMap="processTaskSlaTimeMap">
		SELECT
		a.`processtask_id` as processTaskId,
		a.`name`,
		b.`processtask_step_id` as processTaskStepId,
		c.`sla_id`,
		c.`expire_time` as expireTime,
		c.`realexpire_time` AS realExpireTime,
		c.`time_left` as
		timeLeft,
		c.`realtime_left` as realTimeLeft,
		c.`time_sum` as timeSum
		FROM `processtask_sla` a
		JOIN `processtask_step_sla` b ON a.`id` = b.`sla_id`
		JOIN `processtask_sla_time` c ON a.`id` = c.`sla_id`
		WHERE b.`processtask_step_id` in
		<foreach collection="list" item="stepId" open="(" separator="," close=")">
			#{stepId}
		</foreach>
		ORDER BY b.`processtask_step_id`, c.`expire_time` ASC
	</select>

	<select id="getProcessTaskSlaTimeBySlaId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskSlaTimeVo">
		SELECT
		`sla_id` as slaId,
		`expire_time` AS expireTime,
		`realexpire_time` AS realExpireTime,
		`time_left` as
		timeLeft,
		`realtime_left` as realTimeLeft,
		`time_sum` as timeSum
		FROM `processtask_sla_time`
		WHERE sla_id = #{value}
	</select>

	<select id="getProcessTaskBaseInfoById" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskVo">
		SELECT
		`id`,
		`title`,
		`process_uuid` AS processUuid,
		`channel_uuid` AS channelUuid,
		`config_hash` AS configHash,
		`priority_uuid` AS priorityUuid,
		`status`,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`owner`,
		(SELECT user_name FROM `user` x WHERE x.uuid = `owner`) AS ownerName,
		(SELECT vip_level FROM `user` x
		WHERE x.uuid = `owner`) AS ownerVipLevel,
		`reporter`,
		(SELECT user_name FROM `user` x WHERE x.uuid = `reporter`) AS reporterName,
		`expire_time` AS expireTime,
		`worktime_uuid` AS worktimeUuid,
		`error`,
		`is_show` as isShow,
		`serial_number` AS serialNumber
		FROM
		`processtask`
		WHERE
		id = #{value}
	</select>

	<select id="getProcessTaskFormByProcessTaskId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskFormVo">
		SELECT
		a.`processtask_id` as processTaskId,
		a.`form_uuid` as formUuid,
		a.`form_name` as formName,
		a.`form_content_hash` as formContentHash
		FROM `processtask_form` a
		WHERE a.`processtask_id` = #{value}
	</select>

	<select id="getProcessTaskStepFormAttributeDataByProcessTaskId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskFormAttributeDataVo">
		SELECT
		`processtask_id` AS processTaskId,
		`attribute_uuid` AS attributeUuid,
		`type` AS
		type,
		`data`,
		`sort`
		FROM
		`processtask_formattribute_data`
		WHERE `processtask_id` = #{value}
	</select>

	<select id="getProcessTaskStepContentByProcessTaskStepId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepContentVo">
		SELECT
		`id`,
		`processtask_id` AS processTaskId,
		`processtask_step_id` AS processTaskStepId,
		`content_hash` AS contentHash,
		`type`,
		`fcd`,
		`fcu`,
		`lcd`,
		`lcu`
		FROM `processtask_step_content`
		WHERE `processtask_step_id` = #{value}
		ORDER BY id DESC
	</select>

	<select id="getProcessTaskStepContentProcessTaskId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepContentVo">
		SELECT
		`id`,
		`processtask_id` AS processTaskId,
		`processtask_step_id` AS processTaskStepId,
		`content_hash` AS contentHash,
		`type`,
		`fcd`,
		`fcu`,
		`lcd`,
		`lcu`
		FROM
		`processtask_step_content`
		WHERE
		processtask_id = #{value}
		ORDER BY id
	</select>

	<select id="getProcessTaskStepUserByStepId" resultType="codedriver.framework.process.dto.ProcessTaskStepUserVo">
		SELECT
		`processtask_id` as processTaskId,
		`processtask_step_id` as processTaskStepId,
		`user_uuid` as userUuid,
		`user_type` as userType,
		(SELECT `user_name` from `user` WHERE `uuid` = `user_uuid`) as
		userName,
		(SELECT `user_info` from `user` WHERE `uuid` = `user_uuid`) as userInfo,
		(SELECT `vip_level` from `user` WHERE `uuid` = `user_uuid`) as userVipLevel,
		`status` as status,
		`action`,
		`start_time`
		AS startTime,
		`end_time` AS endTime,
		`active_time` AS activeTime
		FROM
		`processtask_step_user`
		WHERE
		processtask_step_id = #{processTaskStepId}
		<if test="userType != null and userType != ''">
			and user_type = #{userType}
		</if>
	</select>

	<select id="getProcessTaskStepTimeoutPolicyByProcessTaskStepId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepTimeoutPolicyVo">
		SELECT
		`processtask_id` as processTaskId,
		`processtask_step_id` as processTaskStepId,
		`process_step_uuid` as processStepUuid,
		`policy`,
		`sort`,
		`time`,
		`config`
		FROM
		`processtask_step_timeout_policy`
		WHERE
		`processtask_step_id` = #{value}
		ORDER BY `sort`
	</select>

	<select id="getProcessTaskStepWorkerPolicy" parameterType="codedriver.framework.process.dto.ProcessTaskStepWorkerPolicyVo" resultType="codedriver.framework.process.dto.ProcessTaskStepWorkerPolicyVo">
		SELECT
		`processtask_id` as processTaskId,
		`processtask_step_id` as processTaskStepId,
		`process_step_uuid` as processStepUuid,
		`policy`,
		`sort`,
		`config`
		FROM `processtask_step_worker_policy`
		<where>
			<if test="processTaskId != null">
				AND `processtask_id` = #{processTaskId}
			</if>
			<if test="processTaskStepId != null">
				AND `processtask_step_id` = #{processTaskStepId}
			</if>
		</where>
		ORDER BY `sort`
	</select>

	<select id="getProcessTaskStepWorkerByProcessTaskIdAndProcessTaskStepId" resultType="codedriver.framework.process.dto.ProcessTaskStepWorkerVo">
		SELECT
		ptsw.`processtask_id` AS processTaskId,
		ptsw.`processtask_step_id` AS processTaskStepId,
		ptsw.`type`,
		ptsw.`uuid`,
		CASE `type`
		WHEN 'user' THEN (SELECT u.`user_name` FROM `user` u WHERE u.`uuid` = ptsw.`uuid`)
		WHEN 'team' THEN (SELECT t.`name` FROM `team` t WHERE t.`uuid` = ptsw.`uuid`)
		WHEN 'role' THEN (SELECT r.`name` FROM `role` r WHERE r.`uuid` = ptsw.`uuid`)
		ELSE NULL END AS `name`,
		ptsw.`user_type` AS userType
		FROM `processtask_step_worker` ptsw
		WHERE ptsw.`processtask_id` = #{processTaskId}
		<if test="processTaskStepId != null">
			AND ptsw.`processtask_step_id` = #{processTaskStepId}
		</if>
	</select>

	<select id="getFromProcessTaskStepByToId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepVo">
		SELECT
		a.`id`,
		a.`processtask_id` AS processTaskId,
		a.`name`,
		a.`process_step_uuid` AS processStepUuid,
		a.`status`,
		a.`result`,
		a.`type`,
		a.`handler`,
		a.`is_active` AS isActive,
		a.`config_hash` AS configHash,
		a.`active_time` AS activeTime,
		a.`start_time` AS startTime,
		a.`end_time` AS endTime,
		a.`error`
		FROM
		`processtask_step` a
		JOIN `processtask_step_rel` b ON a.`id` = b.`from_processtask_step_id` AND b.`is_hit` = 1
		WHERE b.`to_processtask_step_id` = #{value}
	</select>

	<select id="getProcessTaskStepByConvergeId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepVo">
		SELECT
		b.`id`,
		b.`status`,
		b.`name`,
		b.`type`,
		b.`handler`,
		b.`is_active` AS isActive,
		a.`is_check` AS isCheck
		FROM
		`processtask_converge` a JOIN
		`processtask_step` b ON a.`processtask_step_id` = b.`id`
		WHERE
		a.`converge_id` = #{value}
	</select>

	<select id="getProcessTaskStepIdByConvergeId" parameterType="java.lang.Long" resultType="java.lang.Long">
		SELECT
		a.`processtask_step_id`
		FROM
		`processtask_converge` a
		WHERE
		a.`converge_id` = #{value}
	</select>

	<select id="getProcessTaskLockById" parameterType="java.lang.Long" resultType="java.lang.Long">
		SELECT id FROM processtask WHERE id = #{value} FOR UPDATE
	</select>

	<select id="getToProcessTaskStepByFromIdAndType" resultType="codedriver.framework.process.dto.ProcessTaskStepVo">
		SELECT
		a.`id`,
		a.`processtask_id` AS processTaskId,
		a.`name`,
		a.`process_step_uuid` AS processStepUuid,
		a.`status`,
		a.`result`,
		a.`type`,
		a.`handler`,
		a.`is_active` AS isActive,
		a.`active_time` AS activeTime,
		a.`start_time` AS startTime,
		a.`end_time` AS endTime,
		a.`error`,
		b.`name` AS aliasName,
		b.`type` AS flowDirection
		FROM
		`processtask_step` a JOIN `processtask_step_rel` b ON a.`id` =
		b.`to_processtask_step_id`
		WHERE
		b.`from_processtask_step_id` = #{fromProcessTaskStepId}
		<if test="type != null and type != ''">
			and b.`type` = #{type}
		</if>
	</select>

	<select id="checkProcessTaskConvergeIsExists" parameterType="codedriver.framework.process.dto.ProcessTaskConvergeVo" resultType="int">
		SELECT
		COUNT(1)
		FROM
		`processtask_converge`
		WHERE
		processtask_id =
		#{processTaskId}
		AND
		converge_id = #{convergeId}
		AND
		processtask_step_id = #{processTaskStepId}
	</select>

	<select id="getProcessTaskStepByProcessTaskIdAndType" resultType="codedriver.framework.process.dto.ProcessTaskStepVo">
		SELECT
		`id`,
		`processtask_id` AS processTaskId,
		`name`,
		`process_step_uuid` AS processStepUuid,
		`status`,
		`result`,
		`type`,
		`handler`,
		`is_active` AS isActive,
		`config_hash` AS configHash,
		`active_time` AS activeTime,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`error`
		FROM
		`processtask_step`
		WHERE `processtask_id` = #{processTaskId}
		AND
		`type` = #{type}
	</select>

	<resultMap id="processTaskStepDetailMap" type="codedriver.framework.process.dto.ProcessTaskStepVo">
		<id column="id" property="id" />
		<result column="processTaskId" property="processTaskId" />
		<result column="name" property="name" />
		<result column="processStepUuid" property="processStepUuid" />
		<result column="status" property="status" />
		<result column="result" property="result" />
		<result column="type" property="type" />
		<result column="handler" property="handler" />
		<result column="isActive" property="isActive" />
		<result column="startTime" property="startTime" />
		<result column="configHash" property="configHash" />
		<result column="endTime" property="endTime" />
		<result column="error" property="error" />
		<collection property="workerList" ofType="codedriver.framework.process.dto.ProcessTaskStepWorkerVo">
			<result column="workerType" property="type" />
			<result column="uuid" property="uuid" />
		</collection>
		<collection property="userList" ofType="codedriver.framework.process.dto.ProcessTaskStepUserVo">
			<result column="userType" property="userType" />
			<result column="user_uuid" property="userUuid" />
			<result column="userStatus" property="status" />
		</collection>
	</resultMap>

	<select id="getProcessTaskActiveStepByProcessTaskIdAndProcessStepType" parameterType="java.lang.Long" resultMap="processTaskStepDetailMap">
		SELECT
		ps.`id`,
		ps.`processtask_id` AS processTaskId,
		ps.`name`,
		ps.`process_step_uuid` AS processStepUuid,
		ps.`status`,
		ps.`result`,
		ps.`type`,
		ps.`handler`,
		ps.`active_time` AS activeTime,
		ps.`start_time`
		AS startTime,
		ps.`end_time` AS endTime,
		ps.`error`,
		ps.`is_active` AS isActive,
		ps.`config_hash` AS configHash,
		psw.`type` as workerType,
		psw.`uuid`,
		psu.`user_uuid`,
		psu.`status` as userStatus,
		psu.`user_type` AS userType
		FROM `processtask_step` ps
		LEFT JOIN `processtask_step_worker` psw ON ps.`processtask_id` = psw.`processtask_id` AND ps.`id` = psw.`processtask_step_id`
		LEFT JOIN
		`processtask_step_user` psu ON ps.`processtask_id` = psu.`processtask_id` AND ps.`id` = psu.`processtask_step_id`
		WHERE ps.`processtask_id` = #{processTaskId}
		<if test="processStepTypeList != null and processStepTypeList.size()>0">
			AND ps.`type` in
			<foreach collection="processStepTypeList" item="processStepType" open="(" separator="," close=")">
				#{processStepType}
			</foreach>
		</if>
		<if test="isActive != null">
			AND ps.`is_active` = #{isActive}
		</if>
	</select>

	<select id="getProcessTaskStepRelByToId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepRelVo">
		SELECT
		`processtask_id` AS processTaskId,
		`from_process_step_uuid` AS fromProcessStepUuid,
		`to_process_step_uuid` AS toProcessStepUuid,
		`from_processtask_step_id` AS fromProcessTaskStepId,
		`to_processtask_step_id` AS toProcessTaskStepId,
		(SELECT xx.`handler` FROM `processtask_step` xx WHERE
		xx.id = `to_processtask_step_id`) AS toProcessStepHandler,
		`condition`,
		`is_hit` AS isHit,
		`name`,
		`type`
		FROM
		`processtask_step_rel`
		WHERE to_processtask_step_id = #{value}
	</select>

	<select id="getProcessTaskStepRelByFromId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepRelVo">
		SELECT
		`processtask_id` AS processTaskId,
		`from_process_step_uuid` AS fromProcessStepUuid,
		`to_process_step_uuid` AS toProcessStepUuid,
		`from_processtask_step_id` AS fromProcessTaskStepId,
		`to_processtask_step_id` AS toProcessTaskStepId,
		(SELECT xx.`handler` FROM `processtask_step` xx WHERE
		xx.id = `to_processtask_step_id`) AS toProcessStepHandler,
		`condition`,
		`is_hit` AS isHit,
		`name`,
		`type`
		FROM
		`processtask_step_rel`
		WHERE from_processtask_step_id = #{value}
	</select>

	<select id="getProcessTaskStepBaseInfoById" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepVo">
		SELECT
		`id`,
		`processtask_id` AS processTaskId,
		`name`,
		`process_step_uuid` AS processStepUuid,
		`status`,
		`result`,
		`type`,
		`handler`,
		`is_active` AS isActive,
		`config_hash` AS configHash,
		`active_time` AS activeTime,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`error`
		FROM
		`processtask_step`
		WHERE id =
		#{value}
	</select>

	<select id="getProcessTaskStepBaseInfoBySlaId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepVo">
		SELECT
		`id`,
		`processtask_id` AS processTaskId,
		`name`,
		`process_step_uuid` AS processStepUuid,
		`status`,
		`result`,
		`type`,
		`handler`,
		`is_active` AS isActive,
		`config_hash` AS configHash,
		`active_time` AS activeTime,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`error`
		FROM
		`processtask_step` a JOIN
		`processtask_step_sla` b ON
		a.id = b.processtask_step_id
		WHERE b.sla_id = #{value}
	</select>

	<select id="getProcessTaskStepBaseInfoByProcessTaskId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepVo">
		SELECT
		`id`,
		`processtask_id` AS processTaskId,
		`name`,
		`process_step_uuid` AS processStepUuid,
		`status`,
		`result`,
		`type`,
		`handler`,
		`is_active` AS isActive,
		`config_hash` AS configHash,
		`active_time` AS activeTime,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`error`
		FROM
		`processtask_step`
		WHERE
		`processtask_id` = #{value}
	</select>

	<select id="getProcessTaskById" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskVo">
		SELECT
		`id`,
		`title`,
		`process_uuid` AS processUuid,
		`channel_uuid` AS channelUuid,
		`config_hash` AS configHash,
		`priority_uuid` AS priorityUuid,
		`status`,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`owner`,
		`reporter`,
		`expire_time` AS expireTime,
		`worktime_uuid` AS worktimeUuid,
		`error`,
		`serial_number` AS serialNumber
		FROM `processtask`
		WHERE `id`= #{id}
	</select>

	<select id="getProcessTaskStepFormAttributeByProcessTaskStepId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepFormAttributeVo">
		SELECT
		`processtask_id` AS processTaskId,
		`processtask_step_id` AS processTaskStepId,
		`attribute_uuid` AS attributeUuid,
		`action`,
		`type`
		FROM `processtask_step_formattribute`
		WHERE `processtask_step_id` = #{value}
	</select>

	<resultMap type="codedriver.framework.process.dto.ProcessTaskStepAuditVo" id="processTaskStepAuditMap">
		<id column="id" property="id" />
		<result column="processtask_id" property="processTaskId" />
		<result column="processtask_step_id" property="processTaskStepId" />
		<result column="processTaskStepName" property="processTaskStepName" />
		<result column="user_uuid" property="userUuid" />
		<result column="userName" property="userName" />
		<result column="userInfo" property="userInfo" />
		<result column="vipLevel" property="vipLevel" />
		<result column="action_time" property="actionTime" />
		<result column="action" property="action" />
		<result column="step_status" property="stepStatus" />
		<result column="original_user" property="originalUser" />
		<result column="originalUserName" property="originalUserName" />
		<collection property="auditDetailList" ofType="codedriver.framework.process.dto.ProcessTaskStepAuditDetailVo">
			<result column="audit_id" property="auditId" />
			<result column="type" property="type" />
			<result column="old_content" property="oldContent" />
			<result column="new_content" property="newContent" />
		</collection>
	</resultMap>
	<select id="getProcessTaskStepAuditList" parameterType="codedriver.framework.process.dto.ProcessTaskStepAuditVo" resultMap="processTaskStepAuditMap">
		SELECT
		psa.`id`,
		psa.`processtask_id`,
		psa.`processtask_step_id`,
		ps.`name` AS processTaskStepName,
		psa.`user_uuid`,
		(SELECT user_name FROM `user` x WHERE x.uuid = psa.`user_uuid`) AS userName,
		(SELECT user_info FROM `user` x WHERE x.uuid = psa.`user_uuid`) as userInfo,
		(SELECT vip_level FROM `user` x WHERE x.uuid = psa.`user_uuid`) as vipLevel,
		psa.`action_time`,
		psa.`action`,
		psa.`step_status`,
		psa.`original_user`,
		(SELECT user_name FROM `user` x WHERE x.uuid = psa.`original_user`) AS originalUserName,
		psad.`audit_id`,
		psad.`type`,
		psad.`old_content`,
		psad.`new_content`
		FROM `processtask_step_audit` psa
		LEFT JOIN `processtask_step_audit_detail` psad ON psad.`audit_id` = psa.`id`
		LEFT JOIN `processtask_step` ps on ps.`id` = psa.`processtask_step_id`
		WHERE psa.`processtask_id` = #{processTaskId}
		<if test="processTaskStepId != null">
			AND psa.`processtask_step_id` = #{processTaskStepId}
		</if>
		<if test="action != null and action != ''">
			AND psa.`action` = #{action}
		</if>
		<if test="userUuid != null and userUuid != ''">
			AND psa.`user_uuid` = #{userUuid}
		</if>
		ORDER BY psa.`id` DESC
	</select>

	<resultMap type="codedriver.framework.process.dto.ProcessTaskStepVo" id="processTaskStepMap">
		<id column="id" property="id" />
		<result column="processtask_id" property="processTaskId" />
		<result column="name" property="name" />
		<result column="process_step_uuid" property="processStepUuid" />
		<result column="status" property="status" />
		<result column="result" property="result" />
		<result column="type" property="type" />
		<result column="handler" property="handler" />
		<result column="is_active" property="isActive" />
		<result column="start_time" property="startTime" />
		<result column="end_time" property="endTime" />
		<result column="error" property="error" />
		<result column="expire_time" property="expireTime" />
		<result column="config_hash" property="configHash" />
	</resultMap>
	<select id="getProcessTaskStepListByProcessTaskId" parameterType="java.lang.Long" resultMap="processTaskStepMap">
		SELECT
		`id`,
		`processtask_id`,
		`name`,
		`process_step_uuid`,
		`status`,
		`result`,
		`type`,
		`handler`,
		`is_active`,
		`active_time`,
		`start_time`,
		`end_time`,
		`error`,
		`expire_time`,
		`config_hash`
		FROM `processtask_step` pts
		WHERE pts.`processtask_id` = #{processTaskId}
	</select>

	<select id="getProcessTaskStepWorkerListByUserUuidTeamUuidListRoleUuidList" resultType="codedriver.framework.process.dto.ProcessTaskStepWorkerVo">
		SELECT
		`processtask_id` AS processTaskId,
		`processtask_step_id` AS processTaskStepId
		FROM `processtask_step_worker`
		WHERE (`type` = 'user' AND `uuid` = #{userUuid})
		<if test="teamUuidList != null and teamUuidList.size() > 0">
			OR (`type` = 'team' AND `uuid` in
			<foreach collection="teamUuidList" item="teamUuid" open="(" separator="," close=")">
				#{teamUuid}
			</foreach>
			)
		</if>
		<if test="roleUuidList != null and roleUuidList.size() > 0">
			OR (`type` = 'role' AND `uuid` in
			<foreach collection="roleUuidList" item="roleUuid" open="(" separator="," close=")">
				#{roleUuid}
			</foreach>
			)
		</if>
	</select>

	<select id="getProcessTaskActiveStepListByStepIdList" resultType="java.util.HashMap">
		SELECT
		pt.`id` AS processTaskId,
		pt.`title` AS title,
		pt.`worktime_uuid` AS worktimeUuid,
		pts.`status` AS status,
		pts.`id` AS processTaskStepId,
		pts.`name` AS stepName,
		pts.`config_hash` AS configHash
		FROM`processtask` pt
		JOIN `processtask_step` pts ON pts.`processtask_id`=pt.`id` AND pts.`is_active`=1
		WHERE pts.`id` IN
		<foreach collection="processTaskStepIdList" item="stepId" open="(" separator="," close=")">
			#{stepId}
		</foreach>
		<if test="keyword != null and keyword != ''">
			AND (pt.`title` LIKE CONCAT('%', #{keyword}, '%') OR pt.`id` LIKE CONCAT('%', #{keyword}, '%'))
		</if>
		ORDER BY pts.`id` DESC
	</select>

	<select id="getProcessTaskFormAttributeDataByProcessTaskIdAndAttributeUuid" parameterType="codedriver.framework.process.dto.ProcessTaskFormAttributeDataVo" resultType="codedriver.framework.process.dto.ProcessTaskFormAttributeDataVo">
		SELECT
		`processtask_id` AS processTaskId,
		`type`,
		`attribute_uuid` AS attributeUuid,
		`data`
		FROM `processtask_formattribute_data`
		WHERE `processtask_id` = #{processTaskId}
		AND `attribute_uuid` = #{attributeUuid}
	</select>

	<select id="checkIsWorker" resultType="int">
		SELECT
		COUNT(1)
		FROM `processtask_step_worker`
		WHERE `processtask_id` = #{processTaskId}
		<if test="processTaskStepId != null">
			AND `processtask_step_id` = #{processTaskStepId}
		</if>
		<if test="userType != null and userType != ''">
			AND `user_type` = #{userType}
		</if>
		AND (
		(`type` = 'user' AND `uuid` = #{userUuid})
		<if test="teamUuidList != null and teamUuidList.size() > 0">
			OR (`type` = 'team' AND `uuid` IN
			<foreach collection="teamUuidList" item="teamUuid" open="(" separator="," close=")">
				#{teamUuid}
			</foreach>
			)
		</if>
		<if test="roleUuidList != null and roleUuidList.size() > 0">
			OR (`type` = 'role' AND `uuid` IN
			<foreach collection="roleUuidList" item="roleUuid" open="(" separator="," close=")">
				#{roleUuid}
			</foreach>
			)
		</if>
		)
	</select>

	<select id="checkIsProcessTaskStepUser" parameterType="codedriver.framework.process.dto.ProcessTaskStepUserVo" resultType="int">
		SELECT
		COUNT(1)
		FROM `processtask_step_user`
		WHERE `processtask_id` = #{processTaskId}
		AND `user_uuid` = #{userUuid}
		<if test="processTaskStepId != null">
			AND `processtask_step_id` = #{processTaskStepId}
		</if>
		<if test="userType != null and userType != ''">
			AND `user_type` = #{userType}
		</if>
	</select>

	<select id="getPrcessTaskAssignWorker" parameterType="codedriver.framework.process.dto.ProcessTaskAssignWorkerVo" resultType="codedriver.framework.process.dto.ProcessTaskAssignWorkerVo">
		SELECT
		`processtask_id` AS processTaskId,
		`processtask_step_id` AS processTaskStepId,
		`from_processtask_step_id` AS fromProcessTaskStepId,
		`from_process_step_uuid` AS fromProcessStepUuid,
		`type`,
		`uuid`,
		`fcu`,
		`fcd`
		FROM `processtask_assignworker`
		WHERE `processtask_id` = #{processTaskId}
		AND `processtask_step_id` = #{processTaskStepId}
		AND `from_process_step_uuid` = #{fromProcessStepUuid}
	</select>

	<select id="getProcessTaskStepBaseInfoByProcessTaskIdAndProcessStepUuid" resultType="codedriver.framework.process.dto.ProcessTaskStepVo">
		SELECT
		`id`,
		`processtask_id` AS processTaskId,
		`name`,
		`process_step_uuid` AS processStepUuid,
		`status`,
		`result`,
		`type`,
		`handler`,
		`is_active` AS isActive,
		`config_hash` AS configHash,
		`active_time` AS activeTime,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`error`
		FROM `processtask_step`
		WHERE
		`processtask_id` = #{processTaskId}
		AND `process_step_uuid` = #{processStepUuid}
	</select>

	<select id="getProcessTaskStepBaseInfoByProcessTaskIdAndProcessStepUuidList" resultType="codedriver.framework.process.dto.ProcessTaskStepVo">
		SELECT
		`id`,
		`processtask_id` AS processTaskId,
		`name`,
		`process_step_uuid` AS processStepUuid,
		`status`,
		`result`,
		`type`,
		`handler`,
		`is_active` AS isActive,
		`config_hash` AS configHash,
		`active_time` AS
		activeTime,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`error`
		FROM `processtask_step`
		WHERE `processtask_id` = #{processTaskId}
		AND `process_step_uuid` IN
		<foreach collection="processStepUuidList" item="processStepUuid" open="(" separator="," close=")">
			#{processStepUuid}
		</foreach>
	</select>

	<select id="getProcessTaskAuditList" resultType="codedriver.framework.process.dto.ProcessTaskStepAuditVo">
		SELECT
		`processtask_id` as processTaskId,
		`processtask_step_id` as processTaskStepId,
		`user_uuid` as userUuid,
		`action_time` as actionTime,
		`action`,
		`step_status` as stepStatus,
		`original_user` as
		originalUser
		FROM
		`processtask_step_audit`
		WHERE 1=1
		<if test="processTaskId != null">
			and `processtask_id` = #{processTaskId}
		</if>
		<if test="userUuid != null">
			and `user_uuid` = #{userUuid}
		</if>
		<if test="action != null">
			and `action` = #{action}
		</if>
	</select>

	<select id="getProcessTaskListByKeywordAndIdList" resultType="codedriver.framework.process.dto.ProcessTaskVo">
		SELECT
		`id`,
		`title`,
		`process_uuid` AS processUuid,
		`channel_uuid` AS channelUuid,
		`config_hash` AS configHash,
		`priority_uuid` AS priorityUuid,
		`status`,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`owner`,
		`reporter`,
		`expire_time` AS expireTime,
		`worktime_uuid` AS worktimeUuid,
		`error`,
		`serial_number` AS serialNumber
		FROM `processtask`
		<where>
			<if test="processTaskIdList != null and processTaskIdList.size() >0">
				`id` IN
				<foreach collection="processTaskIdList" item="id" open="(" separator="," close=")">
					#{id}
				</foreach>
			</if>
			<if test="keyword != null and keyword != ''">
				AND (`title` LIKE CONCAT('%', #{keyword}, '%') OR `id` LIKE CONCAT('%', #{keyword}, '%'))
			</if>
			<if test="fromDate != null and fromDate != ''">
				AND `start_time` >= #{fromDate}
			</if>
			<if test="toDate != null and toDate != ''">
				AND `start_time` &lt;= #{toDate}
			</if>
		</where>
	</select>

	<select id="getProcessTaskStepListByIdList" parameterType="java.util.List" resultType="codedriver.framework.process.dto.ProcessTaskStepVo">
		SELECT
		`id`,
		`processtask_id` AS processTaskId,
		`name`,
		`process_step_uuid` AS processStepUuid,
		`status`,
		`result`,
		`type`,
		`handler`,
		`is_active` AS isActive,
		`active_time` AS activeTime,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`error`,
		`expire_time` AS expireTime,
		`config_hash` AS configHash
		FROM `processtask_step`
		WHERE `id` IN
		<foreach collection="list" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</select>

	<select id="getProcessTaskStepNotifyPolicy" parameterType="codedriver.framework.process.dto.ProcessTaskStepNotifyPolicyVo" resultType="codedriver.framework.process.dto.ProcessTaskStepNotifyPolicyVo">
		SELECT
		a.`processtask_step_id` AS processTaskStepId,
		a.`policy_id` AS policyId,
		a.`policy_name` AS policyName,
		a.`policy_config_hash` AS policyConfigHash,
		b.`config` AS policyConfig
		FROM `processtask_step_notify_policy` a
		JOIN `processtask_step_notify_policy_config` b ON b.`hash` = a.`policy_config_hash`
		WHERE a.`processtask_step_id` = #{processTaskStepId}
		AND a.`policy_id` = #{policyId}
	</select>

	<select id="getProcessTaskOldFormAndPropByTaskId" parameterType="java.lang.Long" resultType="java.util.HashMap">
		select form,prop from processtask_old_form_prop where processtask_id = #{value}
	</select>

	<select id="getWorkloadByTeamUuid" parameterType="java.lang.String" resultType="java.util.HashMap">
		SELECT
		c.`uuid` AS userUuid,
		COUNT(c.`uuid`) AS count
		FROM `user_team` a
		JOIN `user` b ON b.`uuid`=a.`user_uuid`
		JOIN `processtask_step_worker` c ON c.`uuid`=b.`uuid` AND c.`type` = 'user' AND c.`user_type`='major'
		WHERE a.`team_uuid` = #{value}
		GROUP BY c.`uuid`
		ORDER BY COUNT(c.`uuid`) ASC
	</select>

	<select id="getFileIdListByContentId" parameterType="java.lang.Long" resultType="java.lang.Long">
		SELECT `file_id` FROM `processtask_file` WHERE `content_id` = #{value}
	</select>

	<select id="getProcessTaskStepContentById" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepContentVo">
		SELECT
		`id`,
		`processtask_id` AS processTaskId,
		`processtask_step_id` AS processTaskStepId,
		`content_hash` AS contentHash,
		`type`,
		`fcd`,
		`fcu`,
		`lcd`,
		`lcu`
		FROM `processtask_step_content`
		WHERE `id` = #{value}
	</select>

	<select id="checkProcessTaskhasForm" parameterType="java.lang.Long" resultType="int">
		SELECT COUNT(`processtask_id`) FROM `processtask_form` WHERE `processtask_id` = #{value}
	</select>

	<select id="getProcessTaskStepUserList" parameterType="codedriver.framework.process.dto.ProcessTaskStepUserVo" resultType="codedriver.framework.process.dto.ProcessTaskStepUserVo">
		SELECT
		`processtask_id` as processTaskId,
		`processtask_step_id` as processTaskStepId,
		`user_uuid` as userUuid,
		`user_type` as userType,
		`status` as status,
		`action`,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`active_time` AS activeTime
		FROM `processtask_step_user`
		WHERE `processtask_id`= #{processTaskId}
		<if test="processTaskStepId != null">
			AND `processtask_step_id` = #{processTaskStepId}
		</if>
		<if test="userType != null and userType != ''">
			AND `user_type` = #{userType}
		</if>
		<if test="userUuid != null and userUuid != ''">
			AND user_uuid = #{userUuid}
		</if>
	</select>

	<select id="getProcessTaskScoreInfoById" parameterType="java.lang.Long" resultType="java.lang.String">
		SELECT
		pc.`content`
		FROM `processtask` p
		left join `processtask_step_audit` psa on p.`id` = psa.`processtask_id`
		left join `processtask_step_audit_detail` psaa on psa.`id` = psaa.`audit_id`
		left join `processtask_content` pc on psaa.`new_content` = pc.`hash`
		WHERE p.`id` = #{value} and psa.`action` = 'score'
	</select>

	<resultMap id="processTaskAndStepMap" type="codedriver.framework.process.dto.ProcessTaskVo">
		<id column="id" property="id" />
		<result column="title" property="title" />
		<result column="process_uuid" property="processUuid" />
		<result column="channel_uuid" property="channelUuid" />
		<result column="config_hash" property="configHash" />
		<result column="priority_uuid" property="priorityUuid" />
		<result column="status" property="status" />
		<result column="owner" property="owner" />
		<result column="reporter" property="reporter" />
		<result column="worktime_uuid" property="worktimeUuid" />
		<result column="start_time" property="startTime" />
		<result column="isShow" property="isShow" />
		<result column="endTime" property="endTime" />
		<collection property="stepList" ofType="codedriver.framework.process.dto.ProcessTaskStepVo">
			<result column="stepId" property="id" />
			<result column="stepName" property="name" />
			<result column="stepStatus" property="status" />
			<result column="type" property="type" />
			<result column="handler" property="handler" />
			<result column="is_active" property="isActive" />
			<result column="stepConfigHash" property="configHash" />
			<result column="stepActiveTime" property="activeTime" />
			<result column="stepStartTime" property="startTime" />
			<result column="stepEndTime" property="endTime" />
		</collection>
	</resultMap>

	<select id="getProcessTaskAndStepById" parameterType="java.lang.Long" resultMap="processTaskAndStepMap" useCache="false">
		SELECT
		p.`id`,
		p.`title`,
		p.`process_uuid`,
		p.`channel_uuid`,
		p.`config_hash`,
		p.`priority_uuid`,
		p.`status`,
		p.`owner`,
		p.`reporter`,
		p.`worktime_uuid`,
		p.`start_time`,
		p.`end_time`,
		p.`is_show` as isShow,
		ps.`id` as stepId,
		ps.`name` as stepName,
		ps.`status` as stepStatus,
		ps.`type`,
		ps.`handler`,
		ps.`is_active`,
		ps.`config_hash` as stepConfigHash,
		ps.`active_time` as stepActiveTime,
		ps.`start_time` as stepStartTime,
		ps.`end_time` as stepEndTime
		from
		`processtask` p
		left join `processtask_step` ps
		on p.`id` = ps.`processtask_id`
		where p.`id` = #{value}
	</select>

	<select id="getFromProcessTaskIdByToProcessTaskId" parameterType="java.lang.Long" resultType="java.lang.Long">
		SELECT `from_processtask_id` FROM `processtask_tranfer_report` WHERE `to_processtask_id` = #{value}
	</select>

	<select id="getToProcessTaskIdListByFromProcessTaskId" parameterType="java.lang.Long" resultType="java.lang.Long">
		SELECT `to_processtask_id` FROM `processtask_tranfer_report` WHERE `from_processtask_id` = #{value} ORDER BY `id` DESC
	</select>

	<select id="getProcessTaskRelationCountByProcessTaskId" parameterType="java.lang.Long" resultType="int">
		select count(1) from (
		SELECT `id` FROM `processtask_relation` WHERE `source` = #{value} OR `target` = #{value}
		UNION
		SELECT `id` FROM `processtask_tranfer_report` WHERE `from_processtask_id` = #{value} OR
		`to_processtask_id` = #{value}
		) a
	</select>

	<select id="getProcessTaskRelationList" parameterType="codedriver.framework.process.dto.ProcessTaskRelationVo" resultType="codedriver.framework.process.dto.ProcessTaskRelationVo">
		SELECT
		a.`id`,
		a.`channelTypeRelationId`,
		a.`source`,
		a.`target`,
		a.`processTaskId`,
		a.`action`
		FROM (
		SELECT
		`id`,
		`channel_type_relation_id` AS channelTypeRelationId,
		`source`,
		`target`,
		`target` AS processTaskId,
		'relation' AS action
		FROM `processtask_relation`
		WHERE `source` = #{processTaskId}
		UNION
		SELECT
		`id`,
		`channel_type_relation_id` AS channelTypeRelationId,
		`source`,
		`target`,
		`source` AS processTaskId,
		'relation' AS action
		FROM `processtask_relation`
		WHERE `target` = #{processTaskId}
		UNION
		SELECT
		`id`,
		`channel_type_relation_id` AS channelTypeRelationId,
		`from_processtask_id` AS source,
		`to_processtask_id` AS target,
		`to_processtask_id` AS processTaskId,
		'tranferreport' AS action
		FROM `processtask_tranfer_report`
		WHERE `from_processtask_id` = #{processTaskId}
		UNION
		SELECT
		`id`,
		`channel_type_relation_id` AS channelTypeRelationId,
		`from_processtask_id` AS source,
		`to_processtask_id` AS target,
		`from_processtask_id` AS processTaskId,
		'tranferreport' AS action
		FROM `processtask_tranfer_report`
		WHERE `to_processtask_id` = #{processTaskId}
		) a
		ORDER BY a.id DESC
		<if test="needPage == true">
			LIMIT #{startNum}, #{pageSize}
		</if>
	</select>

	<select id="checkProcessTaskIdListIsExists" parameterType="java.lang.Long" resultType="java.lang.Long">
		SELECT `id` FROM `processtask` WHERE `id` IN
		<foreach collection="list" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</select>

	<select id="getProcessTaskCountByKeywordAndChannelUuidList" resultType="int">
		SELECT
		COUNT(1)
		FROM `processtask`
		WHERE `status` != 'draft'
		AND `channel_uuid` IN
		<foreach collection="channelUuidList" item="channelUuid" open="(" separator="," close=")">
			#{channelUuid}
		</foreach>
		<if test="basePageVo.keyword != null and basePageVo.keyword != ''">
			AND (`id` LIKE CONCAT('%', #{basePageVo.keyword}, '%') OR `title` LIKE CONCAT('%', #{basePageVo.keyword}, '%'))
		</if>
	</select>

	<select id="getProcessTaskListByKeywordAndChannelUuidList" resultType="codedriver.framework.process.dto.ProcessTaskVo">
		SELECT
		`id`,
		`title`,
		`process_uuid` AS processUuid,
		`channel_uuid` AS channelUuid,
		`config_hash` AS configHash,
		`priority_uuid` AS priorityUuid,
		`status`,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`owner`,
		(SELECT user_name FROM `user` x WHERE x.uuid = `owner`) AS ownerName,
		`reporter`,
		(SELECT user_name FROM `user` x WHERE x.uuid = `reporter`) AS reporterName,
		`expire_time` AS expireTime,
		`worktime_uuid` AS worktimeUuid,
		`error`
		FROM `processtask`
		WHERE `status` != 'draft'
		AND `channel_uuid` IN
		<foreach collection="channelUuidList" item="channelUuid" open="(" separator="," close=")">
			#{channelUuid}
		</foreach>
		<if test="basePageVo.keyword != null and basePageVo.keyword != ''">
			AND (`id` LIKE CONCAT('%', #{basePageVo.keyword}, '%') OR `title` LIKE CONCAT('%', #{basePageVo.keyword}, '%'))
		</if>
		ORDER BY `id` DESC
		<if test="basePageVo.needPage">
			LIMIT #{basePageVo.startNum}, #{basePageVo.pageSize}
		</if>
	</select>

	<select id="getProcessTaskTranferReportByToProcessTaskId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskTranferReportVo">
		SELECT
		`id`,
		`channel_type_relation_id` AS channelTypeRelationId,
		`from_processtask_id` AS fromProcessTaskId,
		`to_processtask_id` AS toProcessTaskId
		FROM `processtask_tranfer_report`
		WHERE `to_processtask_id` = #{value}
	</select>

	<select id="searchProcessTaskImportAuditCount" parameterType="codedriver.framework.process.dto.ProcessTaskImportAuditVo" resultType="int" useCache="false">
		SELECT
		COUNT(p.`id`)
		FROM `processtask_import_audit` p
		WHERE 1=1
		<if test="status != null">
			and `status` = #{status}
		</if>
		<if test="keyword != null and keyword != ''">
			and (`title` like CONCAT('%', #{keyword}, '%') or `processtask_id` like CONCAT('%', #{keyword}, '%'))
		</if>
	</select>

	<select id="searchProcessTaskImportAudit" parameterType="codedriver.framework.process.dto.ProcessTaskImportAuditVo" resultType="codedriver.framework.process.dto.ProcessTaskImportAuditVo"
		useCache="false">
		SELECT
		`id`,
		`processtask_id` as processTaskId,
		`title`,
		`channel_uuid` as channelUuid,
		(select `name` from `channel` where `uuid` = `channel_uuid`) as channelName,
		`status`,
		`error_reason` as errorReason,
		`owner`,
		(select u.`user_name` from `user` u where u.`uuid` = `owner`) as ownerName,
		`import_time` as importTime
		FROM
		`processtask_import_audit`
		WHERE 1=1
		<if test="status != null">
			and `status` = #{status}
		</if>
		<if test="keyword != null and keyword != ''">
			and (`title` like CONCAT('%', #{keyword}, '%') or `processtask_id` like CONCAT('%', #{keyword}, '%'))
		</if>
		order by `import_time` desc
		<if test="needPage">
			limit #{startNum}, #{pageSize}
		</if>
	</select>

	<select id="getProcessTaskRelationById" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskRelationVo">
		SELECT
		`id`,
		`channel_type_relation_id` AS channelTypeRelationId,
		`source`,
		`target`
		FROM `processtask_relation`
		WHERE `id` = #{value}
	</select>

	<select id="getProcessTaskStepRemindListByProcessTaskStepId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepRemindVo">
		SELECT
		`processtask_id` AS processTaskId,
		`processtask_step_id` AS processTaskStepId,
		`action`,
		`title`,
		`fcu`,
		(SELECT user_name FROM `user` x WHERE x.uuid = `fcu`) AS fcuName,
		`fcd`,
		`content_hash` AS contentHash
		FROM `processtask_step_remind`
		WHERE `processtask_step_id` = #{value}
	</select>

	<select id="getProcessTaskScoreTemplateByProcessTaskId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskScoreTemplateVo">
		SELECT
		`processtask_id` AS processTaskId,
		`score_template_id` AS scoreTemplateId,
		`is_auto` AS isAuto,
		`config_hash` AS configHash
		FROM `processtask_score_template`
		WHERE `processtask_id` = #{value}
	</select>

	<select id="getSlaIdListByProcessTaskStepId" parameterType="java.lang.Long" resultType="java.lang.Long">
		SELECT `sla_id` FROM `processtask_step_sla` WHERE `processtask_step_id` = #{value}
	</select>

	<select id="getSlaIdListByProcessTaskId" parameterType="java.lang.Long" resultType="java.lang.Long">
		SELECT `id` FROM `processtask_sla` WHERE `processtask_id` = #{value}
	</select>

	<select id="getProcessTaskSlaConfigById" parameterType="java.lang.Long" resultType="java.lang.String">
		SELECT `config` FROM `processtask_sla` WHERE `id` = #{value}
	</select>

	<select id="getProcessTaskStepIdListBySlaId" parameterType="java.lang.Long" resultType="java.lang.Long">
		SELECT `processtask_step_id` FROM `processtask_step_sla` WHERE `sla_id` = #{value}
	</select>

	<select id="getProcessTaskSlaNotifyBySlaId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskSlaNotifyVo">
		SELECT
		`id`,
		`sla_id` AS slaId,
		`hash`,
		`trigger_time` triggerTime,
		`config`
		FROM `processtask_sla_notify`
		WHERE `sla_id` = #{value}
	</select>

	<select id="getProcessTaskSlaTransferBySlaId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskSlaTransferVo">
		SELECT
		`id`,
		`sla_id` AS slaId,
		`hash`,
		`trigger_time` triggerTime,
		`config`
		FROM `processtask_sla_transfer`
		WHERE `sla_id` = #{value}
	</select>

	<select id="getProcessTaskSlaLockById" parameterType="java.lang.Long" resultType="java.lang.Long">
		SELECT `id` FROM `processtask_sla` WHERE `id` = #{value} FOR UPDATE
	</select>

	<select id="checkProcessTaskFocusExists" resultType="int">
		SELECT count(`processtask_id`) FROM `processtask_focus` WHERE `processtask_id` = #{processTaskId} and `user_uuid` = #{userUuid}
	</select>

	<select id="getFocusUsersOfProcessTask" parameterType="java.lang.Long" resultType="java.lang.String">
		SELECT CONCAT("user#",`user_uuid`) FROM `processtask_focus` WHERE `processtask_id` = #{value}
	</select>

	<select id="getProcessTaskStepAgentByProcessTaskStepId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepAgentVo">
		SELECT
		`processtask_id` AS processTaskId,
		`processtask_step_id` AS processTaskStepId,
		`user_uuid` AS userUuid,
		`agent_uuid` AS agentUuid
		FROM `processtask_step_agent`
		WHERE `processtask_step_id` = #{value}
	</select>

	<select id="getProcessTaskStepContentByProcessTaskId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTaskStepContentVo">
		SELECT
		`id`,
		`processtask_id` AS processTaskId,
		`processtask_step_id` AS processTaskStepId,
		`content_hash` AS contentHash,
		`type`,
		`fcd`,
		`fcu`,
		`lcd`,
		`lcu`
		FROM `processtask_step_content`
		WHERE `processtask_id` = #{value}
		ORDER BY `processtask_step_id`
	</select>

	<select id="getProcessTaskTagListByProcessTaskId" parameterType="java.lang.Long" resultType="codedriver.framework.process.dto.ProcessTagVo">
		SELECT
		b.`id`,
		b.`name`
		FROM `processtask_tag` a
		LEFT JOIN `process_tag` b ON a.`tag_id` = b.`id`
		WHERE a.`processtask_id` = #{processTaskId}
	</select>

	<select id="getProcessTaskStepInOperationCountByProcessTaskId" parameterType="java.lang.Long" resultType="int">
		SELECT COUNT(1) FROM `processtask_step_in_operation` WHERE `processtask_id` = #{value}
	</select>

	<select id="getProcessTaskCountByChannelTypeUuid" parameterType="java.lang.String" resultType="int">
		SELECT
		COUNT(a.`id`)
		FROM processtask a
		JOIN channel b ON b.`uuid` = a.`channel_uuid`
		JOIN channel_type c ON c.`uuid` = b.`channel_type_uuid`
		WHERE c.`uuid` = #{value}
	</select>

	<resultMap type="codedriver.framework.process.dto.ProcessTaskVo" id="processTaskMap">
		<id column="id" property="id" />
		<result column="title" property="title" />
		<result column="process_uuid" property="processUuid" />
		<result column="channel_uuid" property="channelUuid" />
		<result column="config_hash" property="configHash" />
		<result column="priority_uuid" property="priorityUuid" />
		<result column="status" property="status" />
		<result column="start_time" property="startTime" />
		<result column="end_time" property="endTime" />
		<result column="owner" property="owner" />
		<result column="reporter" property="reporter" />
		<result column="expire_time" property="expireTime" />
		<result column="worktime_uuid" property="worktimeUuid" />
		<result column="is_show" property="isShow" />
		<result column="serial_number" property="serialNumber" />
	</resultMap>

	<select id="getProcessTaskListByChannelTypeUuid" parameterType="codedriver.framework.process.dto.ProcessTaskVo" resultMap="processTaskMap">
		SELECT
		a.`id`,
		a.`title`,
		a.`process_uuid`,
		a.`channel_uuid`,
		a.`config_hash`,
		a.`priority_uuid`,
		a.`status`,
		a.`start_time`,
		a.`end_time`,
		a.`owner`,
		a.`reporter`,
		a.`expire_time`,
		a.`worktime_uuid`,
		a.`is_show`,
		a.`serial_number`
		FROM `processtask` a
		JOIN channel b ON b.`uuid` = a.`channel_uuid`
		JOIN channel_type c ON c.`uuid` = b.`channel_type_uuid`
		WHERE c.`uuid` = #{channelTypeUuid}
		ORDER BY a.`id`
		<if test="needPage">
			limit #{startNum}, #{pageSize}
		</if>
	</select>

	<resultMap type="codedriver.framework.process.dto.ProcessTaskVo" id="processTaskDetailMap">
		<id column="id" property="id" />
		<result column="title" property="title" />
		<result column="process_uuid" property="processUuid" />
		<result column="channel_uuid" property="channelUuid" />
		<result column="config_hash" property="configHash" />
		<result column="priority_uuid" property="priorityUuid" />
		<result column="status" property="status" />
		<result column="start_time" property="startTime" />
		<result column="end_time" property="endTime" />
		<result column="owner" property="owner" />
		<result column="reporter" property="reporter" />
		<result column="expire_time" property="expireTime" />
		<result column="worktime_uuid" property="worktimeUuid" />
		<result column="is_show" property="isShow" />
		<result column="serial_number" property="serialNumber" />
		<result column="config" property="config" />
		
		<collection property="stepList" ofType="codedriver.framework.process.dto.ProcessTaskStepVo">
			<id column="bId" property="id" />
			<result column="bProcessTaskId" property="processTaskId" />
			<result column="bName" property="name" />
			<result column="bProcessStepUuid" property="processStepUuid" />
			<result column="bStatus" property="status" />
			<result column="bType" property="type" />
			<result column="bHandler" property="handler" />
			<result column="bIsActive" property="isActive" />
			<collection property="workerList" ofType="codedriver.framework.process.dto.ProcessTaskStepWorkerVo">
				<id column="cUuid" property="uuid" />
				<result column="cProcessTaskId" property="processTaskId" />
				<result column="cProcessTaskStepId" property="processTaskStepId" />
				<result column="cType" property="type" />
				<result column="cUserType" property="userType" />
			</collection>
			<collection property="userList" ofType="codedriver.framework.process.dto.ProcessTaskStepUserVo">
				<id column="dUserUuid" property="userUuid" />
				<result column="dProcessTaskId" property="processTaskId" />
				<result column="dProcessTaskStepId" property="processTaskStepId" />
				<result column="dUserType" property="userType" />
			</collection>
		</collection>
	</resultMap>
	<select id="getProcessTaskDetailListByIdList" parameterType="java.lang.Long" resultMap="processTaskDetailMap">
	SELECT 
	  a.`id`,
	  a.`title`,
	  a.`process_uuid`,
	  a.`channel_uuid`,
	  a.`config_hash`,
	  a.`priority_uuid`,
	  a.`status`,
	  a.`start_time`,
	  a.`end_time`,
	  a.`owner`,
	  a.`reporter`,
	  a.`expire_time`,
	  a.`worktime_uuid`,
	  a.`is_show`,
	  a.`serial_number`,
	  
	  b.`id` AS bId,
	  b.`processtask_id` AS bProcessTaskId,
	  b.`name` AS bName,
	  b.`process_step_uuid` AS bProcessStepUuid,
	  b.`status` AS bStatus,
	  b.`type` AS bType,
	  b.`handler` AS bHandler,
	  b.`is_active` AS bIsActive,
	  
	  c.`processtask_id` AS cProcessTaskId,
	  c.`processtask_step_id` AS cProcessTaskStepId,
	  c.`type` AS cType,
	  c.`uuid` AS cUuid,
	  c.`user_type` AS cUserType,
	  
	  d.`processtask_id` AS dProcessTaskId,
	  d.`processtask_step_id` AS dProcessTaskStepId,
	  d.`user_uuid` AS dUserUuid,
	  d.`user_type` AS dUserType,
	  
	  e.`config`	      
	FROM `processtask` a
	LEFT JOIN `processtask_step` b ON b.`processtask_id` = a.`id`
	LEFT JOIN `processtask_step_worker` c ON c.`processtask_step_id` = b.`id`
	LEFT JOIN `processtask_step_user` d ON d.`processtask_step_id` = b.`id`
	LEFT JOIN `processtask_config` e ON e.`hash` = a.`config_hash`
	WHERE a.`id` IN 
	<foreach collection="list" item="id" open="(" separator="," close=")">
	#{id}
	</foreach>
	</select>
	
	<update id="updateProcessTaskStepConvergeIsCheck">
		UPDATE `processtask_converge` SET is_check = #{isCheck} WHERE converge_id = #{convergeId}
		AND processtask_step_id = #{processTaskStepId}
	</update>

	<update id="updateProcessTaskStepRelIsHit">
		UPDATE
		`processtask_step_rel`
		SET
		`is_hit` = #{isHit}
		WHERE `from_processtask_step_id` = #{fromProcessTaskStepId}
		<if test="toProcessTaskStepId != null">
			AND `to_processtask_step_id` = #{toProcessTaskStepId}
		</if>
	</update>

	<update id="updateProcessTaskStepStatus" parameterType="codedriver.framework.process.dto.ProcessTaskStepVo">
		UPDATE
		`processtask_step`
		SET
		`status` = #{status},
		`result` = #{result},
		`is_active` = #{isActive},
		<if test="updateActiveTime == 1">
			`active_time` = NOW(3),
		</if>
		<choose>
			<when test="updateStartTime == 1">
				`start_time` = NOW(3),
			</when>
			<when test="updateStartTime == -1">
				`start_time` = NULL,
			</when>
		</choose>
		<choose>
			<when test="updateEndTime == 1">
				`end_time` = NOW(3),
			</when>
			<when test="updateEndTime == -1">
				`end_time` = NULL,
			</when>
		</choose>
		`error` = #{error}
		WHERE `id` = #{id}
	</update>

	<insert id="insertProcessTaskSlaNotify" parameterType="codedriver.framework.process.dto.ProcessTaskSlaNotifyVo">
		<selectKey keyProperty="id" resultType="java.lang.Long" order="AFTER">
			select LAST_INSERT_ID() as id
		</selectKey>
		INSERT INTO `processtask_sla_notify` (
		`sla_id`,
		`hash`,
		`trigger_time`,
		`config`
		)
		VALUES
		(
		#{slaId},
		#{hash},
		#{triggerTime},
		#{config}
		)
	</insert>

	<insert id="insertProcessTaskSlaTransfer" parameterType="codedriver.framework.process.dto.ProcessTaskSlaTransferVo">
		<selectKey keyProperty="id" resultType="java.lang.Long" order="AFTER">
			select LAST_INSERT_ID() as id
		</selectKey>
		INSERT INTO `processtask_sla_transfer` (
		`sla_id`,
		`hash`,
		`trigger_time`,
		`config`
		)
		VALUES
		(
		#{slaId},
		#{hash},
		#{triggerTime},
		#{config}
		)
	</insert>

	<insert id="insertProcessTaskStepSla">
		INSERT INTO `processtask_step_sla` (`processtask_step_id`, `sla_id`)
		VALUES
		(#{processTaskStepId}, #{slaId});
	</insert>

	<insert id="insertProcessTaskSla" parameterType="codedriver.framework.process.dto.ProcessTaskSlaVo">
		<selectKey keyProperty="id" resultType="java.lang.Long" order="AFTER">
			select LAST_INSERT_ID() as id
		</selectKey>
		INSERT INTO `processtask_sla` (
		`processtask_id`,
		`name`,
		`config`
		)
		VALUES
		(
		#{processTaskId},
		#{name},
		#{config}
		)
	</insert>

	<insert id="insertProcessTaskStepAuditDetail" parameterType="codedriver.framework.process.dto.ProcessTaskStepAuditDetailVo">
		INSERT INTO `processtask_step_audit_detail` (
		`audit_id`,
		`type`,
		`old_content`,
		`new_content`
		)
		VALUES
		(
		#{auditId},
		#{type},
		#{oldContent},
		#{newContent}
		)
	</insert>

	<insert id="insertProcessTaskStepAudit" parameterType="codedriver.framework.process.dto.ProcessTaskStepAuditVo">
		<selectKey keyProperty="id" resultType="java.lang.Long" order="AFTER">
			select LAST_INSERT_ID() as id
		</selectKey>
		INSERT INTO `processtask_step_audit` (
		`processtask_id`,
		`processtask_step_id`,
		`user_uuid`,
		`action_time`,
		`action`,
		`step_status`,
		`original_user`
		)
		VALUES
		(
		#{processTaskId},
		#{processTaskStepId},
		#{userUuid},
		NOW(3),
		#{action},
		#{stepStatus},
		#{originalUser}
		)
	</insert>

	<insert id="insertProcessTaskForm" parameterType="codedriver.framework.process.dto.ProcessTaskFormVo">
		INSERT INTO `processtask_form` (
		`processtask_id`,
		`form_uuid`,
		`form_name`,
		`form_content_hash`
		)
		VALUES
		(
		#{processTaskId},
		#{formUuid},
		#{formName},
		#{formContentHash}
		)
	</insert>

	<insert id="replaceProcessTaskFormContent" parameterType="codedriver.framework.process.dto.ProcessTaskFormVo">
		REPLACE INTO `processtask_form_content` (`hash`, `content`)
		VALUES
		(#{formContentHash}, #{formContent});
	</insert>

	<insert id="insertProcessTaskStepTimeoutPolicy" parameterType="codedriver.framework.process.dto.ProcessTaskStepTimeoutPolicyVo">
		INSERT INTO `processtask_step_timeout_policy` (
		`processtask_id`,
		`processtask_step_id`,
		`process_step_uuid`,
		`policy`,
		`sort`,
		`time`,
		`config`
		)
		VALUES
		(
		#{processTaskId},
		#{processTaskStepId},
		#{processStepUuid},
		#{policy},
		#{sort},
		#{time},
		#{config}
		)
	</insert>

	<insert id="insertProcessTaskStepWorkerPolicy" parameterType="codedriver.framework.process.dto.ProcessTaskStepWorkerPolicyVo">
		INSERT INTO `processtask_step_worker_policy` (
		`processtask_id`,
		`processtask_step_id`,
		`process_step_uuid`,
		`policy`,
		`sort`,
		`config`
		)
		VALUES
		(
		#{processTaskId},
		#{processTaskStepId},
		#{processStepUuid},
		#{policy},
		#{sort},
		#{config}
		)
	</insert>

	<insert id="replaceProcessTaskFormAttributeData" parameterType="codedriver.framework.process.dto.ProcessTaskFormAttributeDataVo">
		REPLACE INTO `processtask_formattribute_data` (
		`processtask_id`,
		`attribute_uuid`,
		`data`,
		`type`,
		`sort`
		)
		VALUES
		(
		#{processTaskId},
		#{attributeUuid},
		#{data},
		#{type},
		#{sort}
		)
	</insert>

	<insert id="insertProcessTaskConverge" parameterType="codedriver.framework.process.dto.ProcessTaskConvergeVo">
		INSERT INTO `processtask_converge` (
		`converge_id`,
		`processtask_step_id`,
		`processtask_id`
		)
		VALUES
		(
		#{convergeId},
		#{processTaskStepId},
		#{processTaskId}
		)
	</insert>

	<insert id="insertProcessTaskStepWorker" parameterType="codedriver.framework.process.dto.ProcessTaskStepWorkerVo">
		INSERT INTO `processtask_step_worker` (
		`processtask_id`,
		`processtask_step_id`,
		`type`,
		`uuid`,
		`user_type`
		)
		VALUES
		(
		#{processTaskId},
		#{processTaskStepId},
		#{type},
		#{uuid},
		#{userType}
		)
	</insert>

	<insert id="insertProcessTaskStepRel" parameterType="codedriver.framework.process.dto.ProcessTaskStepRelVo">
		INSERT INTO `processtask_step_rel` (
		`processtask_id`,
		`from_process_step_uuid`,
		`to_process_step_uuid`,
		`from_processtask_step_id`,
		`to_processtask_step_id`,
		`condition`,
		`is_hit`,
		`uuid`,
		`name`,
		`type`
		)
		VALUES
		(
		#{processTaskId},
		#{fromProcessStepUuid},
		#{toProcessStepUuid},
		#{fromProcessTaskStepId},
		#{toProcessTaskStepId},
		#{condition},
		#{isHit},
		#{processStepRelUuid},
		#{name},
		#{type}
		)
	</insert>

	<insert id="insertProcessTaskStep" parameterType="codedriver.framework.process.dto.ProcessTaskStepVo">
		<!-- <selectKey keyProperty="id" resultType="java.lang.Long" order="AFTER"> select LAST_INSERT_ID() as id </selectKey> -->
		INSERT INTO `processtask_step` (
		`id`,
		`processtask_id`,
		`name`,
		`process_step_uuid`,
		`status`,
		`type`,
		`handler`,
		`is_active`,
		`config_hash`
		)
		VALUES
		(
		#{id},
		#{processTaskId},
		#{name},
		#{processStepUuid},
		#{status},
		#{type},
		#{handler},
		#{isActive},
		#{configHash}
		)
	</insert>

	<insert id="replaceProcessTaskStep" parameterType="codedriver.framework.process.dto.ProcessTaskStepVo">
		<!-- <selectKey keyProperty="id" resultType="java.lang.Long" order="AFTER"> select LAST_INSERT_ID() as id </selectKey> -->
		REPLACE INTO `processtask_step` (
		`id`,
		`processtask_id`,
		`name`,
		`process_step_uuid`,
		`status`,
		`type`,
		`handler`,
		`is_active`,
		`active_time`,
		`start_time`,
		`end_time`,
		`config_hash`
		)
		VALUES
		(
		#{id},
		#{processTaskId},
		#{name},
		#{processStepUuid},
		#{status},
		#{type},
		#{handler},
		#{isActive},
		#{activeTime},
		#{startTime},
		#{endTime},
		#{configHash}
		)
	</insert>

	<insert id="insertProcessTask" parameterType="codedriver.framework.process.dto.ProcessTaskVo">
		<!-- <selectKey keyProperty="id" resultType="java.lang.Long" order="AFTER"> select LAST_INSERT_ID() as id </selectKey> -->
		INSERT INTO `processtask` (
		`id`,
		`title`,
		`process_uuid`,
		`channel_uuid`,
		`config_hash`,
		`priority_uuid`,
		`status`,
		`start_time`,
		`owner`,
		`reporter`,
		`expire_time`,
		`worktime_uuid`,
		`serial_number`
		)
		VALUES
		(
		#{id},
		#{title},
		#{processUuid},
		#{channelUuid},
		#{configHash},
		#{priorityUuid},
		#{status},
		NOW(3),
		#{owner},
		#{reporter},
		#{expireTime},
		#{worktimeUuid},
		#{serialNumber}
		)
	</insert>

	<insert id="replaceProcessTask" parameterType="codedriver.framework.process.dto.ProcessTaskVo">
		<!-- <selectKey keyProperty="id" resultType="java.lang.Long" order="AFTER"> select LAST_INSERT_ID() as id </selectKey> -->
		REPLACE INTO `processtask` (
		`id`,
		`title`,
		`process_uuid`,
		`channel_uuid`,
		`config_hash`,
		`priority_uuid`,
		`status`,
		`start_time`,
		`owner`,
		`reporter`,
		`expire_time`,
		`worktime_uuid`
		)
		VALUES
		(
		#{id},
		#{title},
		#{processUuid},
		#{channelUuid},
		#{configHash},
		#{priorityUuid},
		#{status},
		NOW(3),
		#{owner},
		#{reporter},
		#{expireTime},
		#{worktimeUuid}
		)
	</insert>

	<insert id="replaceProcessTaskContent" parameterType="codedriver.framework.process.dto.ProcessTaskContentVo">
		REPLACE INTO `processtask_content` (`content`,`hash`)
		VALUES
		(#{content}, #{hash})
	</insert>

	<insert id="insertProcessTaskStepContent" parameterType="codedriver.framework.process.dto.ProcessTaskStepContentVo">
		INSERT INTO `processtask_step_content` (
		`id`,
		`processtask_id`,
		`processtask_step_id`,
		`content_hash`,
		`type`,
		`fcd`,
		`fcu`
		)
		VALUES
		(
		#{id},
		#{processTaskId},
		#{processTaskStepId},
		#{contentHash},
		#{type},
		NOW(3),
		#{fcu}
		)
	</insert>

	<insert id="insertProcessTaskStepUser" parameterType="codedriver.framework.process.dto.ProcessTaskStepUserVo">
		INSERT INTO `processtask_step_user` (
		`processtask_id`,
		`processtask_step_id`,
		`user_uuid`,
		`user_type`,
		`user_name`,
		`status`,
		`active_time`,
		`start_time`
		)
		VALUES
		(
		#{processTaskId},
		#{processTaskStepId},
		#{userUuid},
		#{userType},
		#{userName},
		#{status},
		NOW(3),
		NOW(3)
		)
	</insert>

	<insert id="replaceProcessTaskStepConfig" parameterType="codedriver.framework.process.dto.ProcessTaskStepConfigVo">
		REPLACE INTO `processtask_step_config` (`hash`, `config`)
		VALUES
		(#{hash}, #{config})
	</insert>

	<insert id="insertProcessTaskStepFormAttribute" parameterType="codedriver.framework.process.dto.ProcessTaskStepFormAttributeVo">
		INSERT INTO `processtask_step_formattribute` (
		`processtask_id`,
		`processtask_step_id`,
		`attribute_uuid`,
		`action`,
		`type`
		)
		VALUES
		(
		#{processTaskId},
		#{processTaskStepId},
		#{attributeUuid},
		#{action},
		#{type}
		)
	</insert>

	<insert id="replaceProcessTaskConfig" parameterType="codedriver.framework.process.dto.ProcessTaskConfigVo">
		REPLACE INTO `processtask_config` (`hash`, `config`)
		VALUES
		(#{hash}, #{config})
	</insert>

	<insert id="insertProcessTaskSlaTime" parameterType="codedriver.framework.process.dto.ProcessTaskSlaTimeVo">
		INSERT INTO `processtask_sla_time` (
		`sla_id`,
		`time_sum`,
		`expire_time`,
		`realexpire_time`,
		`time_left`,
		`realtime_left`
		)
		VALUES
		(
		#{slaId},
		#{timeSum},
		#{expireTime},
		#{realExpireTime},
		#{timeLeft},
		#{realTimeLeft}
		)
	</insert>

	<insert id="insertProcessTaskStepFile" parameterType="codedriver.framework.process.dto.ProcessTaskStepFileVo">
		INSERT INTO `processtask_file` (
		`processtask_id`,
		`processtask_step_id`,
		`content_id`,
		`file_id`
		)
		VALUES
		(
		#{processTaskId},
		#{processTaskStepId},
		#{contentId},
		#{fileId}
		)
	</insert>

	<insert id="insertProcessTaskAssignWorker" parameterType="codedriver.framework.process.dto.ProcessTaskAssignWorkerVo">
		INSERT INTO `processtask_assignworker` (
		`processtask_id`,
		`processtask_step_id`,
		`from_processtask_step_id`,
		`from_process_step_uuid`,
		`type`,
		`uuid`,
		`fcu`,
		`fcd`
		)
		VALUES
		(
		#{processTaskId},
		#{processTaskStepId},
		#{fromProcessTaskStepId},
		#{fromProcessStepUuid},
		#{type},
		#{uuid},
		#{fcu},
		NOW(3)
		)
	</insert>

	<insert id="replaceProcessTaskStepNotifyPolicyConfig" parameterType="codedriver.framework.process.dto.ProcessTaskStepNotifyPolicyVo">
		REPLACE INTO `processtask_step_notify_policy_config` (`hash`, `config`)
		VALUES (#{policyConfigHash}, #{policyConfig})
	</insert>

	<insert id="insertProcessTaskStepNotifyPolicy" parameterType="codedriver.framework.process.dto.ProcessTaskStepNotifyPolicyVo">
		INSERT INTO `processtask_step_notify_policy` (
		`processtask_step_id`,
		`policy_id`,
		`policy_name`,
		`policy_config_hash`
		)
		VALUES
		(
		#{processTaskStepId},
		#{policyId},
		#{policyName},
		#{policyConfigHash}
		)
	</insert>

	<insert id="replaceProcessTaskOldFormProp">
		REPLACE INTO `processtask_old_form_prop` (`processtask_id`, `form`, `prop`)
		VALUES
		(#{processTaskId}, #{form}, #{prop})
	</insert>

	<insert id="insertProcessTaskTranferReport" parameterType="codedriver.framework.process.dto.ProcessTaskTranferReportVo">
		INSERT INTO `processtask_tranfer_report` (
		`id`,
		`channel_type_relation_id`,
		`from_processtask_id`,
		`to_processtask_id`
		)
		VALUES
		(
		#{id},
		#{channelTypeRelationId},
		#{fromProcessTaskId},
		#{toProcessTaskId}
		)
	</insert>

	<insert id="replaceProcessTaskRelation" parameterType="codedriver.framework.process.dto.ProcessTaskRelationVo">
		REPLACE INTO `processtask_relation` (
		`id`,
		`channel_type_relation_id`,
		`source`,
		`target`
		)
		VALUES
		(
		#{id},
		#{channelTypeRelationId},
		#{source},
		#{target}
		)
	</insert>

	<insert id="batchInsertProcessTaskImportAudit" parameterType="java.util.List">
		INSERT INTO `processtask_import_audit`(
		`id`,
		`processtask_id`,
		`title`,
		`channel_uuid`,
		`status`,
		`error_reason`,
		`owner`,
		`import_time`
		)
		VALUES
		<foreach collection="list" index="index" item="item" separator=",">
			(
			#{item.id},
			#{item.processTaskId},
			#{item.title},
			#{item.channelUuid},
			#{item.status},
			#{item.errorReason},
			#{item.owner},
			NOW(3)
			)
		</foreach>
	</insert>

	<insert id="insertProcessTaskStepRemind" parameterType="codedriver.framework.process.dto.ProcessTaskStepRemindVo">
		INSERT INTO `processtask_step_remind` (
		`processtask_id`,
		`processtask_step_id`,
		`action`,
		`title`,
		`fcu`,
		`fcd`,
		`content_hash`
		)
		VALUES
		(
		#{processTaskId},
		#{processTaskStepId},
		#{action},
		#{title},
		#{fcu},
		NOW(3),
		#{contentHash}
		)
	</insert>

	<insert id="insertProcessTaskScoreTemplate" parameterType="codedriver.framework.process.dto.ProcessTaskScoreTemplateVo">
		INSERT INTO `processtask_score_template` (
		`processtask_id`,
		`score_template_id`,
		`is_auto`,
		`config_hash`
		)
		VALUES
		(
		#{processTaskId},
		#{scoreTemplateId},
		#{isAuto},
		#{configHash}
		)
	</insert>

	<insert id="insertProcessTaskScoreTempleteConfig" parameterType="codedriver.framework.process.dto.ProcessTaskScoreTemplateConfigVo">
		INSERT INTO `processtask_score_template_config` (`hash`, `config`) VALUES (#{hash}, #{config})
	</insert>

	<insert id="insertProcessTaskFocus">
		INSERT INTO `processtask_focus` (`processtask_id`, `user_uuid`) VALUES (#{processTask.id}, #{userUuid})
	</insert>

	<insert id="replaceProcesssTaskStepAgent" parameterType="codedriver.framework.process.dto.ProcessTaskStepAgentVo">
		REPLACE INTO `processtask_step_agent` (
		`processtask_id`,
		`processtask_step_id`,
		`user_uuid`,
		`agent_uuid`
		)
		VALUES
		(
		#{processTaskId},
		#{processTaskStepId},
		#{userUuid},
		#{agentUuid}
		)
	</insert>

	<insert id="insertProcessTaskTag" parameterType="codedriver.framework.process.dto.ProcessTaskTagVo">
		INSERT INTO `processtask_tag` (`processtask_id`, `tag_id`)
		VALUES
		<foreach collection="processTaskTagList" item="tag" open="(" separator="),(" close=")">
			#{tag.processTaskId},
			#{tag.tagId}
		</foreach>
	</insert>

	<insert id="insertProcessTaskStepInOperation" parameterType="codedriver.framework.process.dto.ProcessTaskStepInOperationVo">
		INSERT INTO `processtask_step_in_operation` (
		`processtask_id`,
		`processtask_step_id`,
		`operation_type`,
		`operation_time`
		)
		VALUES
		(
		#{processTaskId},
		#{processTaskStepId},
		#{operationType},
		NOW(3)
		)
	</insert>

	<update id="updateProcessTaskSlaTransfer" parameterType="codedriver.framework.process.dto.ProcessTaskSlaTransferVo">
		UPDATE
		`processtask_sla_transfer`
		SET
		`trigger_time` = #{triggerTime}
		WHERE id = #{id}
	</update>

	<update id="updateProcessTaskSlaNotify" parameterType="codedriver.framework.process.dto.ProcessTaskSlaNotifyVo">
		UPDATE
		`processtask_sla_notify`
		SET
		`trigger_time` = #{triggerTime}
		WHERE id = #{id}
	</update>

	<update id="updateProcessTaskSlaTime" parameterType="codedriver.framework.process.dto.ProcessTaskSlaTimeVo">
		UPDATE
		`processtask_sla_time`
		SET
		`expire_time` = #{expireTime},
		`realexpire_time` = #{realExpireTime},
		`time_left` = #{timeLeft},
		`realtime_left` = #{realTimeLeft},
		`time_sum` = #{timeSum}
		WHERE `sla_id` = #{slaId}
	</update>

	<update id="updateProcessTaskStepUserStatus" parameterType="codedriver.framework.process.dto.ProcessTaskStepUserVo">
		UPDATE
		`processtask_step_user`
		SET
		<choose>
			<when test="status == 'doing'">
				`start_time` = NOW(3),
				`end_time` = NULL,
			</when>
			<when test="status == 'done'">
				`end_time` = NOW(3),
			</when>
		</choose>
		`status` = #{status}
		WHERE
		`processtask_step_id` = #{processTaskStepId}
		AND `user_uuid` = #{userUuid}
		AND `user_type` = #{userType}
	</update>

	<update id="updateProcessTaskStatus" parameterType="codedriver.framework.process.dto.ProcessTaskVo">
		UPDATE
		`processtask`
		SET
		<choose>
			<when test="status == 'succeed' or status == 'failed' or status == 'aborted'">
				`end_time` = NOW(3),
			</when>
			<otherwise>
				`end_time` = null,
			</otherwise>
		</choose>
		`status` = #{status}
		WHERE
		`id` = #{id}
	</update>

	<update id="updateProcessTaskTitleOwnerPriorityUuid" parameterType="codedriver.framework.process.dto.ProcessTaskVo">
		UPDATE
		`processtask`
		SET
		`title` = #{title},
		`priority_uuid` = #{priorityUuid},
		`owner` = #{owner}
		WHERE `id` = #{id}
	</update>

	<update id="updateProcessTaskStepContentById">
		UPDATE `processtask_step_content`
		SET
		`content_hash` = #{contentHash},
		`lcd` = NOW(3),
		`lcu` = #{lcu}
		WHERE `id` = #{id}
	</update>

	<update id="updateProcessTaskStepWorkerUuid" parameterType="codedriver.framework.process.dto.ProcessTaskStepWorkerVo">
		UPDATE `processtask_step_worker`
		SET `uuid` = #{newUuid}
		WHERE `processtask_step_id` = #{processTaskStepId}
		AND `type` = #{type}
		AND `uuid` = #{uuid}
		AND `user_type` = #{userType}
	</update>

	<update id="updateProcessTaskStepUserUserUuid" parameterType="codedriver.framework.process.dto.ProcessTaskStepUserVo">
		UPDATE `processtask_step_user`
		SET `user_uuid` = #{userUuid}
		WHERE `processtask_step_id` = #{processTaskStepId}
		AND `user_uuid` = #{userUuid}
		AND `user_type` = #{userType}
	</update>

	<update id="updateProcessTaskIsShow" parameterType="codedriver.framework.process.dto.ProcessTaskVo">
		UPDATE `processtask` SET `is_show` = #{isShow} WHERE id = #{id}
	</update>

	<update id="updateProcessTaskPriorityUuidById">
		UPDATE `processtask` SET `priority_uuid` = #{priorityUuid} WHERE `id` = #{id}
	</update>

	<update id="updateProcessTaskSerialNumberById">
		UPDATE `processtask` SET `serial_number` = #{serialNumber} WHERE `id` = #{id}
	</update>

	<delete id="deleteProcessTaskConvergeByStepId" parameterType="java.lang.Long">
		DELETE
		FROM
		`processtask_converge`
		WHERE
		`processtask_step_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskConvergeByProcessTaskId" parameterType="java.lang.Long">
		DELETE
		FROM
		`processtask_converge`
		WHERE
		`processtask_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskFormAttributeDataByProcessTaskId" parameterType="java.lang.Long">
		DELETE FROM `processtask_formattribute_data` WHERE `processtask_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskStepWorker" parameterType="codedriver.framework.process.dto.ProcessTaskStepWorkerVo">
		DELETE FROM `processtask_step_worker`
		<where>
			<if test="processTaskId != null and processTaskId != ''">
				`processtask_id` = #{processTaskId}
			</if>
			<if test="processTaskStepId != null and processTaskStepId != ''">
				AND `processtask_step_id` = #{processTaskStepId}
			</if>
			<if test="type != null and type != ''">
				AND `type` = #{type}
			</if>
			<if test="uuid != null and uuid != ''">
				AND `uuid` = #{uuid}
			</if>
			<if test="userType != null and userType != ''">
				AND `user_type` = #{userType}
			</if>
		</where>
	</delete>

	<delete id="deleteProcessTaskStepWorkerByProcessTaskId" parameterType="codedriver.framework.process.dto.ProcessTaskStepWorkerVo">
		DELETE FROM `processtask_step_worker`
		where `processtask_id` = #{processTaskId}

	</delete>

	<delete id="deleteProcessTaskStepUser">
		DELETE
		FROM
		`processtask_step_user`
		WHERE `processtask_step_id` = #{processTaskStepId}
		<if test="userType != null and userType != ''">
			AND `user_type` = #{userType}
		</if>
		<if test="userUuid != null and userUuid != ''">
			AND `user_uuid` = #{userUuid}
		</if>
	</delete>

	<delete id="deleteProcessTaskStepUserByProcessTaskId" parameterType="java.lang.Long">
		DELETE
		FROM
		`processtask_step_user`
		WHERE `processtask_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskSlaNotifyById" parameterType="java.lang.Long">
		DELETE
		FROM
		`processtask_sla_notify`
		WHERE id = #{value}
	</delete>

	<delete id="deleteProcessTaskSlaTransferById" parameterType="java.lang.Long">
		DELETE
		FROM
		`processtask_sla_transfer`
		WHERE id = #{value}
	</delete>

	<delete id="deleteProcessTaskSlaTransferBySlaId" parameterType="java.lang.Long">
		DELETE
		FROM
		`processtask_sla_transfer`
		WHERE sla_id = #{value}
	</delete>

	<delete id="deleteProcessTaskSlaNotifyBySlaId" parameterType="java.lang.Long">
		DELETE
		FROM
		`processtask_sla_notify`
		WHERE sla_id = #{value}
	</delete>

	<delete id="deleteProcessTaskStepAuditById" parameterType="java.lang.Long">
		DELETE psa, psad
		FROM `processtask_step_audit` psa
		LEFT JOIN `processtask_step_audit_detail` psad ON psad.`audit_id` = psa.`id`
		WHERE `id` = #{id}
	</delete>

	<delete id="deleteProcessTaskStepAuditByProcessTaskId" parameterType="java.lang.Long">
		DELETE psa, psad
		FROM `processtask_step_audit` psa
		LEFT JOIN `processtask_step_audit_detail` psad ON psad.`audit_id` = psa.`id`
		WHERE `processtask_id` = #{id}
	</delete>

	<delete id="deleteProcessTaskAssignWorker" parameterType="codedriver.framework.process.dto.ProcessTaskAssignWorkerVo">
		DELETE FROM`processtask_assignworker`
		WHERE `processtask_step_id` = #{processTaskStepId}
		AND `from_processtask_step_id` = #{fromProcessTaskStepId}
	</delete>

	<delete id="deleteProcessTaskAssignWorkerByProcessTaskId" parameterType="java.lang.Long">
		DELETE FROM`processtask_assignworker`
		WHERE `processtask_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskStepFileByProcessTaskStepId" parameterType="java.lang.Long">
		DELETE FROM `processtask_file` WHERE `processtask_step_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskStepFileByProcessTaskId" parameterType="java.lang.Long">
		DELETE FROM `processtask_file` WHERE `processtask_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskStepContentByProcessTaskStepId" parameterType="java.lang.Long">
		DELETE FROM `processtask_step_content` WHERE `processtask_step_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskStepFileByContentId" parameterType="java.lang.Long">
		DELETE FROM `processtask_file` WHERE `content_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskStepContentById" parameterType="java.lang.Long">
		DELETE FROM `processtask_step_content` WHERE `id` = #{value}
	</delete>

	<delete id="deleteProcessTaskStepContentByProcessTaskId" parameterType="java.lang.Long">
		DELETE FROM `processtask_step_content` WHERE `processtask_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskRelationById" parameterType="java.lang.Long">
		DELETE FROM `processtask_relation` WHERE `id` = #{value}
	</delete>

	<delete id="deleteProcessTaskStepRemind" parameterType="codedriver.framework.process.dto.ProcessTaskStepRemindVo">
		DELETE FROM `processtask_step_remind`
		WHERE `processtask_step_id` = #{processTaskStepId}
		<if test="action != null and action != ''">
			AND `action` = #{action}
		</if>
	</delete>

	<delete id="deleteProcessTaskStepRemindByProcessTaskId" parameterType="java.lang.Long">
		DELETE FROM `processtask_step_remind`
		WHERE `processtask_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskFocus">
		DELETE FROM `processtask_focus` WHERE `processtask_id` = #{processTask.id}
		<if test="userUuid != null">
			and `user_uuid` = #{userUuid}
		</if>
	</delete>

	<delete id="deleteProcessTaskFocusByProcessTaskId">
		DELETE FROM `processtask_focus` WHERE `processtask_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskFormByProcessTaskId" parameterType="java.lang.Long">
		delete from `processtask_form`
		where `processtask_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskSlaTimeBySlaId" parameterType="java.lang.Long">
		delete from `processtask_sla_time`
		where `sla_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskStepByProcessTaskId" parameterType="java.lang.Long">
		DELETE ps,psa,psau,psaud,psc,psnp,psco,psd,psf,psr,psrl,pss,pssu,pssc,pst,pstp,psu,psw,pswp
		FROM
		`processtask_step` ps
		LEFT JOIN `processtask_step_agent`psa ON psa.`processtask_id` = ps.`processtask_id` AND psa.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_audit` psau ON psau.`processtask_id` = ps.`processtask_id` AND psau.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_audit_detail` psaud ON psau.id = psaud.audit_id
		LEFT JOIN `processtask_step_content` psc ON psc.`processtask_id` = ps.`processtask_id` AND psc.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_notify_policy` psnp ON psnp.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_comment` psco ON psco.`processtask_id` = ps.`processtask_id` AND psco.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_data` psd ON psd.`processtask_id` = ps.`processtask_id` AND psd.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_formattribute` psf ON psf.`processtask_id` = ps.`processtask_id` AND psf.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_remind` psr ON psr.`processtask_id` = ps.`processtask_id` AND psr.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_rel` psrl ON psrl.`processtask_id` = ps.`processtask_id`
		LEFT JOIN `processtask_step_sla` pss ON pss.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_subtask` pssu ON pssu.`processtask_id` = ps.`processtask_id` AND pssu.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_subtask_content` pssc ON pssu.`id` = pssc.`processtask_step_subtask_id`
		LEFT JOIN `processtask_step_timeaudit` pst ON pst.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_timeout_policy` pstp ON pstp.`processtask_id` = ps.`processtask_id` AND pstp.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_user` psu ON psu.`processtask_id` = ps.`processtask_id` AND psu.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_worker` psw ON psw.`processtask_id` = ps.`processtask_id` AND psw.`processtask_step_id` = ps.id
		LEFT JOIN `processtask_step_worker_policy` pswp ON pswp.`processtask_id` = ps.`processtask_id` AND pswp.`processtask_step_id` = ps.id
		WHERE ps.`processtask_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskByProcessTaskId" parameterType="java.lang.Long">
		delete from `processtask` where `id` = #{value}
	</delete>

	<delete id="deleteProcessTaskStepAgentByProcessTaskStepId" parameterType="java.lang.Long">
		DELETE FROM `processtask_step_agent` WHERE `processtask_step_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskTagByProcessTaskId" parameterType="java.lang.Long">
		DELETE FROM `processtask_tag`
		WHERE
		`processtask_id` = #{value}
	</delete>

	<delete id="deleteProcessTaskStepInOperationByProcessTaskStepIdAndOperationType" parameterType="codedriver.framework.process.dto.ProcessTaskStepInOperationVo">
		DELETE FROM `processtask_step_in_operation` WHERE `processtask_step_id` = #{processTaskStepId} and `operation_type` = #{operationType}
	</delete>
</mapper>
