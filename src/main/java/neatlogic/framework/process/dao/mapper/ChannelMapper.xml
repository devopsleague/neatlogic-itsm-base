<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright(c) 2023 NeatLogic Co., Ltd. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.framework.process.dao.mapper.ChannelMapper">
    <cache type="neatlogic.framework.dao.cache.NeatLogicCache" flushInterval="30000" size="100"></cache>
    <select id="searchChannelCount" parameterType="neatlogic.framework.process.dto.ChannelVo" resultType="int"
            useCache="false">
        SELECT
        count(c.`uuid`)
        FROM
        `channel` c
        <if test="isFavorite != 1">
            LEFT
        </if>
        JOIN `channel_user` cu ON cu.`channel_uuid` = c.`uuid` AND cu.`user_uuid` = #{userUuid}
        WHERE 1=1
        <if test="authorizedUuidList != null and authorizedUuidList.size() > 0">
            AND c.`uuid` IN
            <foreach collection="authorizedUuidList" item="authorizedUuid" open="(" separator="," close=")">
                #{authorizedUuid}
            </foreach>
        </if>
        <if test="parentUuid != null">
            AND c.`parent_uuid` = #{parentUuid}
        </if>
        <if test="keyword != null and keyword != ''">
            AND c.`name` LIKE CONCAT('%',#{keyword},'%')
        </if>
        <if test="isActive != null">
            AND c.`is_active` = #{isActive}
        </if>
        <if test="support == 'mobile'">
            AND c.`support` != 'pc'
        </if>
        <if test="support == 'pc'">
            AND c.`support` != 'mobile'
        </if>
        <if test="isFavorite == 1">
            AND NOT EXISTS(
            SELECT `uuid`
            FROM `catalog`
            WHERE `lft` &lt;= (SELECT `lft` FROM `catalog` WHERE `uuid` = c.`parent_uuid`) AND `rht` &gt;=
            (SELECT `rht` FROM `catalog` WHERE `uuid` = c.`parent_uuid`)
            and `is_active` = 0)
        </if>
    </select>

    <resultMap type="neatlogic.framework.process.dto.ChannelVo" id="channelMap">
        <id column="uuid" property="uuid"/>
        <result column="name" property="name"/>
        <result column="parent_uuid" property="parentUuid"/>
        <result column="is_active" property="isActive"/>
        <result column="icon" property="icon"/>
        <result column="color" property="color"/>
        <result column="desc" property="desc"/>
        <result column="channel_type_uuid" property="channelTypeUuid"/>
        <result column="isFavorite" property="isFavorite"/>
        <result column="sort" property="sort"/>
        <result column="parentUuids" property="parentUuids"/>
        <result column="parentNames" property="parentNames"/>
        <collection property="priorityList" ofType="neatlogic.framework.process.dto.PriorityVo">
            <result column="priorityUuid" property="uuid"/>
            <result column="priorityName" property="name"/>
        </collection>
    </resultMap>

    <select id="searchChannelList" parameterType="neatlogic.framework.process.dto.ChannelVo" resultMap="channelMap"
            useCache="false">
        SELECT
        c.`uuid`,
        c.`name`,
        c.`parent_uuid`,
        (SELECT GROUP_CONCAT(NAME ORDER BY lft) FROM catalog WHERE lft &lt;= (SELECT lft FROM `catalog` WHERE UUID =
        c.`parent_uuid`) AND rht >= (SELECT rht FROM
        `catalog` WHERE UUID = c.`parent_uuid`)) AS parentNames,
        (SELECT GROUP_CONCAT(`uuid` ORDER BY lft) FROM catalog WHERE lft &lt;= (SELECT lft FROM `catalog` WHERE UUID =
        c.`parent_uuid`) AND rht >=
        (SELECT rht FROM `catalog` WHERE UUID = c.`parent_uuid`)) AS parentUuids,
        c.`is_active`,
        c.`icon`,
        c.`color`,
        c.`desc`,
        c.`channel_type_uuid`,
        CASE WHEN cu.`user_uuid` IS NULL THEN 0 ELSE 1 END AS
        `isFavorite`,
        c.`sort`
        FROM
        `channel` c
        <if test="isFavorite != 1">
            LEFT
        </if>
        JOIN `channel_user` cu ON cu.`channel_uuid` = c.`uuid` AND cu.`user_uuid` = #{userUuid}
        WHERE 1=1
        <if test="authorizedUuidList != null and authorizedUuidList.size() > 0">
            AND c.`uuid` IN
            <foreach collection="authorizedUuidList" item="authorizedUuid" open="(" separator="," close=")">
                #{authorizedUuid}
            </foreach>
        </if>
        <if test="parentUuid != null">
            AND c.`parent_uuid` = #{parentUuid}
        </if>
        <if test="keyword != null and keyword != ''">
            AND c.`name` LIKE CONCAT('%',#{keyword},'%')
        </if>
        <if test="isActive != null">
            AND c.`is_active` = #{isActive}
        </if>
        <if test="support == 'mobile'">
            AND c.`support` != 'pc'
        </if>
        <if test="support == 'pc'">
            AND c.`support` != 'mobile'
        </if>
        <if test="isFavorite == 1">
            AND NOT EXISTS(
            SELECT `uuid`
            FROM `catalog`
            WHERE `lft` &lt;= (SELECT `lft` FROM `catalog` WHERE `uuid` = c.`parent_uuid`) AND `rht` &gt;=
            (SELECT `rht` FROM `catalog` WHERE `uuid` = c.`parent_uuid`)
            and `is_active` = 0)
        </if>
        <choose>
            <when test="isFavorite == 1">
                ORDER BY cu.`insert_time` DESC
            </when>
            <otherwise>
                ORDER BY c.`parent_uuid`, c.`sort`
            </otherwise>
        </choose>
        <if test="needPage">
            limit #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="getAllChannelList" resultType="neatlogic.framework.process.dto.ChannelVo" useCache="false">
        SELECT `uuid`,
               `name`,
               `parent_uuid`       AS parentUuid,
               `is_active`         AS isActive,
               `icon`,
               `color`,
               `desc`,
               `sort`,
               `sla`,
               `allow_desc`        AS allowDesc,
               `help`,
               `is_active_help`    AS isActiveHelp,
               `channel_type_uuid` AS channelTypeUuid,
               `support`,
               `config`            AS configStr
        FROM `channel`
    </select>

    <select id="searchChannelListForSelect" parameterType="neatlogic.framework.process.dto.ChannelVo"
            resultType="neatlogic.framework.common.dto.ValueTextVo" useCache="false">
        SELECT
        c.`uuid` as `value`,
        c.`name` as `text`
        FROM
        `channel` c
        <if test="isFavorite != 1 and userUuid != null and userUuid != ''">
            LEFT
        </if>
        <if test="userUuid != null and userUuid != ''">
            JOIN `channel_user` cu ON cu.`channel_uuid` = c.`uuid` AND cu.`user_uuid` = #{userUuid}
        </if>
        WHERE 1=1
        <if test="authorizedUuidList != null and authorizedUuidList.size() > 0">
            AND c.`uuid` IN
            <foreach collection="authorizedUuidList" item="authorizedUuid" open="(" separator="," close=")">
                #{authorizedUuid}
            </foreach>
        </if>
        <if test="parentUuid != null">
            AND c.`parent_uuid` = #{parentUuid}
        </if>
        <if test="keyword != null and keyword != ''">
            AND c.`name` LIKE CONCAT('%',#{keyword},'%')
        </if>
        <if test="isActive != null">
            AND c.`is_active` = #{isActive}
        </if>
        <if test="support == 'mobile'">
            AND c.`support` != 'pc'
        </if>
        <if test="support == 'pc'">
            AND c.`support` != 'mobile'
        </if>
        <choose>
            <when test="isFavorite == 1 and userUuid != null and userUuid != ''">
                ORDER BY cu.`insert_time` DESC
            </when>
            <otherwise>
                ORDER BY c.`parent_uuid`, c.`sort`
            </otherwise>
        </choose>
        <if test="needPage">
            limit #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="getChannelByUuid" parameterType="java.lang.String"
            resultType="neatlogic.framework.process.dto.ChannelVo" useCache="true">
        SELECT `uuid`,
               `name`,
               `parent_uuid`       AS parentUuid,
               `is_active`         AS isActive,
               `icon`,
               `color`,
               `desc`,
               `sort`,
               `sla`,
               `allow_desc`        AS allowDesc,
               `help`,
               `is_active_help`    AS isActiveHelp,
               `channel_type_uuid` AS channelTypeUuid,
               `support`,
               `config`            AS configStr
        FROM `channel`
        WHERE `uuid` = #{value}
    </select>

    <select id="getChannelByName" parameterType="java.lang.String"
            resultType="neatlogic.framework.process.dto.ChannelVo" useCache="false">
        SELECT c.`uuid`,
               c.`name`,
               c.`parent_uuid`       AS parentUuid,
               c.`is_active`         AS isActive,
               c.`icon`,
               c.`color`,
               c.`desc`,
               c.`sort`,
               c.`sla`,
               c.`allow_desc`        AS allowDesc,
               c.`help`,
               c.`is_active_help`    AS isActiveHelp,
               c.`channel_type_uuid` AS channelTypeUuid,
               c.`support`,
               c.`config`            AS configStr
        FROM `channel` c
        WHERE c.`name` = #{value}
    </select>

    <select id="getChannelByUuidList" parameterType="java.util.List"
            resultType="neatlogic.framework.process.dto.ChannelVo" useCache="false">
        SELECT
        c.`uuid`,
        c.`name`,
        c.`parent_uuid` AS parentUuid,
        c.`is_active` AS isActive,
        c.`icon`,
        c.`color`,
        c.`desc`,
        c.`sort`,
        c.`sla`,
        c.`allow_desc` AS allowDesc,
        c.`help`,
        c.`is_active_help` AS isActiveHelp,
        c.`channel_type_uuid` AS channelTypeUuid,
        cp.`process_uuid` AS processUuid,
        cw.`worktime_uuid` AS worktimeUuid
        FROM
        `channel` c
        JOIN `channel_process` cp ON cp.channel_uuid = c.uuid
        JOIN
        `channel_worktime` cw ON cw.channel_uuid = c.uuid
        WHERE `uuid` in
        <foreach collection="channelUuidList" item="channelUuid" open="(" separator="," close=")">
            #{channelUuid}
        </foreach>
    </select>

    <select id="getChannelVoByUuidList" parameterType="java.util.List"
            resultType="neatlogic.framework.process.dto.ChannelVo" useCache="false">
        SELECT
        `uuid`,
        `name`,
        `parent_uuid` AS parentUuid,
        `is_active` AS isActive,
        `icon`,
        `color`,
        `sort`,
        `sla`,
        `allow_desc` AS allowDesc,
        `is_active_help` AS isActiveHelp,
        `channel_type_uuid` AS channelTypeUuid,
        `support`,
        `config` AS configStr
        FROM `channel`
        WHERE `uuid` IN
        <foreach collection="list" item="uuid" open="(" separator="," close=")">
            #{uuid}
        </foreach>
    </select>

    <select id="getChannelUuidListByParentUuidList" parameterType="java.lang.String" resultType="java.lang.String">
        SELECT
        `uuid`
        FROM `channel`
        WHERE `parent_uuid` IN
        <foreach collection="list" item="parentUuid" open="(" separator="," close=")">
            #{parentUuid}
        </foreach>
    </select>

    <select id="getMaxSortByParentUuid" parameterType="java.lang.String" resultType="int" useCache="false">
        SELECT IFNULL(MAX(`sort`), 0)
        FROM `channel`
        WHERE `parent_uuid` = #{parentUuid}
    </select>

    <select id="getChannelPriorityListByChannelUuid" parameterType="java.lang.String"
            resultType="neatlogic.framework.process.dto.ChannelPriorityVo" useCache="false">
        SELECT `channel_uuid`  AS channelUuid,
               `priority_uuid` AS priorityUuid,
               `is_default`    AS isDefault
        FROM `channel_priority`
        WHERE channel_uuid = #{channelUuid}
    </select>

    <select id="getAllChannelPriorityList" resultMap="channelMap" useCache="false">
        SELECT a.`uuid`,
               a.`name`,
               b.`priority_uuid` AS priorityUuid,
               c.`name`          AS priorityName
        FROM channel a
                 LEFT JOIN channel_priority b ON a.`uuid` = b.`channel_uuid`
                 LEFT JOIN priority c ON b.`priority_uuid` = c.`uuid`
    </select>

    <select id="checkChannelIsExists" parameterType="java.lang.String" resultType="int" useCache="false">
        SELECT COUNT(`uuid`)
        FROM `channel`
        where `uuid` = #{uuid}
    </select>

    <select id="checkChannelNameIsRepeat" parameterType="neatlogic.framework.process.dto.ChannelVo" resultType="int"
            useCache="false">
        SELECT COUNT(1)
        FROM `channel`
        where `parent_uuid` = #{parentUuid}
          AND `name` = #{name}
          AND `uuid` != #{uuid}
    </select>

    <resultMap type="neatlogic.framework.process.dto.ChannelVo" id="simpleChannelMap">
        <id column="uuid" property="uuid"/>
        <result column="name" property="name"/>
        <result column="parent_uuid" property="parentUuid"/>
        <result column="sort" property="sort"/>
        <result column="is_active" property="isActive"/>
    </resultMap>
    <select id="getChannelListForTree" parameterType="java.lang.Integer" resultMap="simpleChannelMap" useCache="false">
        SELECT
        c.`uuid`,
        c.`name`,
        c.`parent_uuid`,
        c.`sort`,
        c.`is_active`
        FROM
        `channel` c
        <if test="isActive != null">
            WHERE c.`is_active` = #{isActive}
        </if>
        ORDER BY c.`parent_uuid`, c.`sort`
    </select>

    <select id="getProcessUuidByChannelUuid" parameterType="java.lang.String" resultType="java.lang.String"
            useCache="false">
        SELECT `process_uuid`
        FROM `channel_process`
        WHERE `channel_uuid` = #{value}
    </select>

    <select id="getWorktimeUuidByChannelUuid" parameterType="java.lang.String" resultType="java.lang.String"
            useCache="false">
        SELECT `worktime_uuid`
        FROM `channel_worktime`
        WHERE `channel_uuid` = #{value}
    </select>

    <select id="getChannelAuthorityListByChannelUuid" parameterType="java.lang.String"
            resultType="neatlogic.framework.dto.AuthorityVo" useCache="false">
        SELECT `channel_uuid` AS channelUuid,
               `type`,
               `uuid`
        FROM `channel_authority`
        WHERE `channel_uuid` = #{channelUuid}
    </select>

    <select id="getAuthorizedChannelUuidList" resultType="java.lang.String" useCache="false">
        SELECT
        DISTINCT `channel_uuid`
        FROM `channel_authority`
        <where>
            <if test="channelUuid != null and channelUuid != ''">
                `channel_uuid` = #{channelUuid} AND (
            </if>
            (type = 'common' AND `uuid` = 'alluser')
            <if test="userUuid != null and userUuid != ''">
                OR (type = 'user' AND `uuid` = #{userUuid})
            </if>
            <if test="teamUuidList != null and teamUuidList.size() > 0">
                OR (type = 'team' AND `uuid` IN
                <foreach collection="teamUuidList" item="teamUuid" open="(" separator="," close=")">
                    #{teamUuid}
                </foreach>
                )
            </if>
            <if test="roleUuidList != null and roleUuidList.size() > 0">
                OR (type = 'role' AND `uuid` IN
                <foreach collection="roleUuidList" item="roleUuid" open="(" separator="," close=")">
                    #{roleUuid}
                </foreach>
                )
            </if>
            <if test="channelUuid != null and channelUuid != ''">
                )
            </if>
        </where>
    </select>

    <select id="getActiveAuthorizedChannelUuidList" resultType="java.lang.String" useCache="false">
        SELECT
        DISTINCT a.`channel_uuid`
        FROM `channel_authority` a
        JOIN `channel` b ON b.`uuid` = a.`channel_uuid` AND b.`is_active` = 1
        <where>
            <if test="channelUuid != null and channelUuid != ''">
                a.`channel_uuid` = #{channelUuid} AND (
            </if>
            (type = 'common' AND a.`uuid` = 'alluser')
            <if test="userUuid != null and userUuid != ''">
                OR (type = 'user' AND a.`uuid` = #{userUuid})
            </if>
            <if test="teamUuidList != null and teamUuidList.size() > 0">
                OR (type = 'team' AND a.`uuid` IN
                <foreach collection="teamUuidList" item="teamUuid" open="(" separator="," close=")">
                    #{teamUuid}
                </foreach>
                )
            </if>
            <if test="roleUuidList != null and roleUuidList.size() > 0">
                OR (type = 'role' AND a.`uuid` IN
                <foreach collection="roleUuidList" item="roleUuid" open="(" separator="," close=")">
                    #{roleUuid}
                </foreach>
                )
            </if>
            <if test="channelUuid != null and channelUuid != ''">
                )
            </if>
        </where>
    </select>

    <select id="getAuthorizedChannelListByParentUuid" resultType="neatlogic.framework.process.dto.ChannelVo">
        SELECT
        distinct
        c.`uuid`,
        c.`name`,
        c.`is_active` AS isActive,
        c.`icon`,
        c.`color`,
        c.`desc`,
        c.`sort`,
        c.`channel_type_uuid` AS channelTypeUuid,
        c.`support`,
        CASE WHEN cu.`user_uuid` IS NULL THEN 0 ELSE 1 END AS
        `isFavorite`
        FROM
        `channel_authority` ca
        JOIN channel c ON ca.channel_uuid = c.uuid
        LEFT JOIN `channel_user` cu ON cu.`channel_uuid` = c.`uuid`
        <where>
            c.`is_active` =1
            and
            ((ca.type = 'common' AND ca.`uuid` = 'alluser')
            <if test="userUuid != null and userUuid != ''">
                OR (ca.type = 'user' AND ca.`uuid` = #{userUuid})
            </if>
            <if test="teamUuidList != null and teamUuidList.size() > 0">
                OR (ca.type = 'team' AND ca.`uuid` IN
                <foreach collection="teamUuidList" item="teamUuid" open="(" separator="," close=")">
                    #{teamUuid}
                </foreach>
                )
            </if>
            <if test="roleUuidList != null and roleUuidList.size() > 0">
                OR (ca.type = 'role' AND ca.`uuid` IN
                <foreach collection="roleUuidList" item="roleUuid" open="(" separator="," close=")">
                    #{roleUuid}
                </foreach>
                )
            </if>
            )
            <if test="parentUuid != null and parentUuid != ''">
                and c.parent_uuid = #{parentUuid}
            </if>
        </where>
    </select>

    <select id="getAllAncestorNameListByParentUuid" parameterType="java.lang.String" resultType="java.lang.String">
        SELECT a.`name`
        FROM `catalog` a
        WHERE a.`lft` &lt;= (SELECT b.`lft`
                             FROM `catalog` b
                             WHERE b.`uuid`
                                       = #{parentUuid})
          AND a.`uuid` != 0
        ORDER BY a.`lft`
    </select>

    <select id="checkChannelIsFavorite" resultType="int">
        SELECT COUNT(1)
        FROM `channel_user`
        WHERE `user_uuid` = #{userUuid}
          AND `channel_uuid` = #{channelUuid}
    </select>

    <select id="getChannelListByChannelTypeUuidList" parameterType="java.lang.String" resultMap="simpleChannelMap"
            useCache="false">
        SELECT
        `uuid`,
        `name`,
        `parent_uuid`,
        `sort`,
        `is_active`
        FROM `channel`
        WHERE `channel_type_uuid` IN
        <foreach collection="list" item="channelTypeUuid" open="(" separator="," close=")">
            #{channelTypeUuid}
        </foreach>
    </select>

    <select id="getChannelRelationListBySource" parameterType="java.lang.String"
            resultType="neatlogic.framework.process.dto.ChannelRelationVo" useCache="false">
        SELECT `source`,
               `channel_type_relation_id`
                   AS channelTypeRelationId,
               `type`,
               `target`
        FROM `channel_relation`
        WHERE `source` = #{value}
    </select>

    <select id="getChannelRelationAuthorityListBySource" parameterType="java.lang.String"
            resultType="neatlogic.framework.process.dto.ChannelRelationVo" useCache="false">
        SELECT `source`,
               `channel_type_relation_id` AS channelTypeRelationId,
               `type`,
               `uuid`
        FROM `channel_relation_authority`
        WHERE `source` = #{value}
    </select>

    <select id="getChannelRelationTargetList" parameterType="neatlogic.framework.process.dto.ChannelRelationVo"
            resultType="neatlogic.framework.process.dto.ChannelRelationVo" useCache="false">
        SELECT
        DISTINCT
        `type`,
        `target`
        FROM `channel_relation`
        WHERE `source` = #{source}
        <if test="channelTypeRelationId != null">
            AND `channel_type_relation_id` = #{channelTypeRelationId}
        </if>
    </select>

    <select id="getFavoriteChannelList" parameterType="neatlogic.framework.process.dto.ChannelVo"
            resultMap="channelMap" useCache="false">
        SELECT
        c.`uuid`,
        c.`name`,
        c.`parent_uuid`,
        (SELECT GROUP_CONCAT(NAME ORDER BY lft) FROM catalog WHERE lft &lt;= (SELECT lft FROM `catalog` WHERE UUID =
        c.`parent_uuid`) AND rht >= (SELECT rht FROM
        `catalog` WHERE UUID = c.`parent_uuid`)) AS parentNames,
        (SELECT GROUP_CONCAT(`uuid` ORDER BY lft) FROM catalog WHERE lft &lt;= (SELECT lft FROM `catalog` WHERE UUID =
        c.`parent_uuid`) AND rht >=
        (SELECT rht FROM `catalog` WHERE UUID = c.`parent_uuid`)) AS parentUuids,
        c.`is_active`,
        c.`icon`,
        c.`color`,
        c.`desc`,
        c.`channel_type_uuid`,
        1 as `isFavorite`,
        c.`sort`
        FROM
        `channel` c
        JOIN
        `channel_user` cu ON cu.`channel_uuid` = c.`uuid` AND cu.`user_uuid` = #{userUuid}
        WHERE
        NOT EXISTS(
        SELECT `uuid`
        FROM `catalog`
        WHERE `lft` &lt;= (SELECT `lft` FROM `catalog` WHERE `uuid` = c.`parent_uuid`) AND `rht` &gt;=
        (SELECT `rht` FROM `catalog` WHERE `uuid` = c.`parent_uuid`)
        and `is_active` = 0)
        <if test="authorizedUuidList != null and authorizedUuidList.size() > 0">
            AND c.`uuid` IN
            <foreach collection="authorizedUuidList" item="authorizedUuid" open="(" separator="," close=")">
                #{authorizedUuid}
            </foreach>
        </if>
        <if test="isActive != null">
            AND c.`is_active` = #{isActive}
        </if>
        ORDER BY cu.`insert_time` DESC
    </select>

    <select id="getFormAttributeByChannelUuid" parameterType="java.lang.String"
            resultType="neatlogic.framework.form.dto.FormAttributeVo">
        SELECT fa.`form_uuid`        AS formUuid,
               fa.`formversion_uuid` AS formversionUuid,
               fa.`uuid`,
               fa.`label`,
               fa.`type`,
               fa.`handler`
        FROM channel_process cp
                 join process_form pf
                      on cp.process_uuid = pf.process_uuid and cp.channel_uuid = #{value}
                 join form_version fv on pf.form_uuid = fv.form_uuid and fv.is_active = 1
                 join form_attribute fa on fv.uuid = fa.formversion_uuid
    </select>

    <select id="getFormVersionByChannelUuid" parameterType="java.lang.String"
            resultType="neatlogic.framework.form.dto.FormVersionVo">
        SELECT fv.uuid,
               fv.form_uuid   as formUuid,
               fv.version,
               fv.form_config AS formConfig
        FROM channel_process cp
                 JOIN process_form pf ON cp.process_uuid = pf.process_uuid
            AND cp.channel_uuid = #{value}
                 JOIN form_version fv ON pf.form_uuid = fv.form_uuid
            AND fv.is_active = 1
    </select>

    <select id="getFormUuidListByChannelUuidList" parameterType="java.util.List" resultType="java.lang.String">
        SELECT
        DISTINCT a.`form_uuid`
        FROM `process_form` a
        JOIN `channel_process` b on b.`process_uuid` = a.`process_uuid`
        WHERE b.`channel_uuid` IN
        <foreach collection="list" item="channelUuid" open="(" separator="," close=")">
            #{channelUuid}
        </foreach>
    </select>

    <select id="getChannelRelationIsUsePreOwnerBySourceAndChannelTypeRelationId"
            parameterType="neatlogic.framework.process.dto.ChannelRelationVo" resultType="java.lang.Integer">
        SELECT `is_use_pre_owner`
        FROM `channel_relation_isusepreowner`
        WHERE `source` = #{source}
          AND `channel_type_relation_id` = #{channelTypeRelationId}
    </select>

    <insert id="replaceChannel" parameterType="neatlogic.framework.process.dto.ChannelVo">
        REPLACE INTO `channel` (`uuid`,
                                `name`,
                                `parent_uuid`,
                                `is_active`,
                                `icon`,
                                `color`,
                                `desc`,
                                `sort`,
                                `sla`,
                                `allow_desc`,
                                `help`,
                                `is_active_help`,
                                `channel_type_uuid`,
                                `support`,
                                `config`)
        VALUES (#{uuid},
                #{name},
                #{parentUuid},
                #{isActive},
                #{icon},
                #{color},
                #{desc},
                #{sort},
                #{sla},
                #{allowDesc},
                #{help},
                #{isActiveHelp},
                #{channelTypeUuid},
                #{support},
                #{configStr})
    </insert>

    <insert id="replaceChannelUser">
        REPLACE INTO `channel_user`(`user_uuid`, `channel_uuid`, `insert_time`)
        VALUES (#{userUuid}, #{channelUuid}, now(3))
    </insert>

    <insert id="insertChannelPriority">
        INSERT INTO `channel_priority`(`channel_uuid`, `priority_uuid`, `is_default`)
        VALUES (#{channelUuid}, #{priorityUuid}, #{isDefault})
    </insert>

    <insert id="replaceChannelProcess">
        REPLACE INTO `channel_process`(`channel_uuid`, `process_uuid`)
        VALUES (#{channelUuid}, #{processUuid})
    </insert>

    <insert id="insertChannelAuthority">
        INSERT INTO `channel_authority` (`channel_uuid`,
                                         `type`,
                                         `uuid`)
        VALUES (#{channelUuid},
                #{authorityVo.type},
                #{authorityVo.uuid})
    </insert>

    <insert id="replaceChannelWorktime">
        REPLACE INTO `channel_worktime`(`channel_uuid`, `worktime_uuid`)
        VALUES (#{channelUuid}, #{worktimeUuid})
    </insert>

    <insert id="insertChannelRelation" parameterType="neatlogic.framework.process.dto.ChannelRelationVo">
        INSERT INTO `channel_relation` (`source`,
                                        `channel_type_relation_id`,
                                        `type`,
                                        `target`)
        VALUES (#{source},
                #{channelTypeRelationId},
                #{type},
                #{target})
    </insert>

    <insert id="insertChannelRelationAuthority" parameterType="neatlogic.framework.process.dto.ChannelRelationVo">
        INSERT INTO `channel_relation_authority` (`source`,
                                                  `channel_type_relation_id`,
                                                  `type`,
                                                  `uuid`)
        VALUES (#{source},
                #{channelTypeRelationId},
                #{type},
                #{uuid})
    </insert>

    <insert id="insertChannelRelationIsUsePreOwner" parameterType="neatlogic.framework.process.dto.ChannelRelationVo">
        INSERT INTO `channel_relation_isusepreowner` (`source`,
                                                      `channel_type_relation_id`,
                                                      `is_use_pre_owner`)
        VALUES (#{source},
                #{channelTypeRelationId},
                #{isUsePreOwner})
    </insert>

    <update id="updateChannelForMove" parameterType="neatlogic.framework.process.dto.ChannelVo">
        UPDATE `channel`
        SET `parent_uuid` = #{parentUuid},
            `sort`        = #{sort}
        WHERE `uuid` = #{uuid}
    </update>

    <update id="updateSortIncrement">
        UPDATE `channel` SET `sort` = `sort` + 1
        WHERE `parent_uuid` = #{parentUuid}
        AND `sort` &gt;= #{fromSort}
        <if test="toSort != null">
            AND `sort` &lt;= #{toSort}
        </if>
    </update>

    <update id="updateSortDecrement">
        UPDATE `channel` SET `sort` = `sort` - 1
        WHERE `parent_uuid` = #{parentUuid}
        AND `sort` &gt;= #{fromSort}
        <if test="toSort != null">
            AND `sort` &lt;= #{toSort}
        </if>
    </update>

    <update id="updateChannelConfig" parameterType="neatlogic.framework.process.dto.ChannelVo">
        UPDATE `channel`
        SET `config` = #{configStr}
        WHERE `uuid` = #{uuid}
    </update>

    <delete id="deleteChannelUser">
        DELETE
        FROM `channel_user`
        WHERE `user_uuid` = #{userUuid}
          AND `channel_uuid` = #{channelUuid}
    </delete>

    <delete id="deleteChannelByUuid" parameterType="java.lang.String">
        DELETE
        FROM `channel`
        WHERE `uuid` = #{uuid}
    </delete>

    <delete id="deleteChannelPriorityByChannelUuid" parameterType="java.lang.String">
        DELETE
        FROM `channel_priority`
        WHERE `channel_uuid` = #{channelUuid}
    </delete>

    <delete id="deleteChannelProcessByChannelUuid" parameterType="java.lang.String">
        DELETE
        FROM `channel_process`
        WHERE `channel_uuid` = #{channelUuid}
    </delete>

    <delete id="deleteChannelWorktimeByChannelUuid" parameterType="java.lang.String">
        DELETE
        FROM `channel_worktime`
        WHERE `channel_uuid` = #{channelUuid}
    </delete>

    <delete id="deleteChannelUserByChannelUuid" parameterType="java.lang.String">
        DELETE
        FROM `channel_user`
        WHERE `channel_uuid` = #{channelUuid}
    </delete>

    <delete id="deleteChannelAuthorityByChannelUuid" parameterType="java.lang.String">
        DELETE
        FROM `channel_authority`
        WHERE `channel_uuid` = #{channelUuid}
    </delete>

    <delete id="deleteChannelRelationBySource" parameterType="java.lang.String">
        DELETE
        FROM `channel_relation`
        WHERE `source` = #{value}
    </delete>

    <delete id="deleteChannelRelationAuthorityBySource" parameterType="java.lang.String">
        DELETE
        FROM `channel_relation_authority`
        WHERE `source` = #{value}
    </delete>
    <delete id="deleteChannelRelationIsUsePreOwnerBySource" parameterType="java.lang.String">
        DELETE
        FROM `channel_relation_isusepreowner`
        WHERE `source` = #{value}
    </delete>
</mapper>
